var documenterSearchIndex = {"docs":
[{"location":"modules/multilayerqg/#MultilayerQG-Module-1","page":"MultilayerQG Module","title":"MultilayerQG Module","text":"","category":"section"},{"location":"modules/multilayerqg/#Basic-Equations-1","page":"MultilayerQG Module","title":"Basic Equations","text":"","category":"section"},{"location":"modules/multilayerqg/#","page":"MultilayerQG Module","title":"MultilayerQG Module","text":"This module solves the layered quasi-geostrophic equations on a beta-plane of variable fluid depth H-h(xy). The flow in each layer is obtained through a streamfunction psi_j as (u_j upsilon_j) = (-partial_ypsi_j partial_xpsi_j), j=1n, where n is the number of fluid layers.","category":"page"},{"location":"modules/multilayerqg/#","page":"MultilayerQG Module","title":"MultilayerQG Module","text":"The QGPV in each layer is","category":"page"},{"location":"modules/multilayerqg/#","page":"MultilayerQG Module","title":"MultilayerQG Module","text":"mathrmQGPV_j = q_j  + underbracef_0+beta y_textrmplanetary PV + delta_jnunderbracefracf_0 hH_n_textrmtopographic PVquad j=1n","category":"page"},{"location":"modules/multilayerqg/#","page":"MultilayerQG Module","title":"MultilayerQG Module","text":"where","category":"page"},{"location":"modules/multilayerqg/#","page":"MultilayerQG Module","title":"MultilayerQG Module","text":"q_1 = nabla^2psi_1 + F_32 1 (psi_2-psi_1)\nq_j = nabla^2psi_j + F_j-12 j (psi_j-1-psi_j) + F_j+12 j (psi_j+1-psi_j)quad j=2dotsn-1\nq_n = nabla^2psi_n + F_n-12 n (psi_n-1-psi_n)","category":"page"},{"location":"modules/multilayerqg/#","page":"MultilayerQG Module","title":"MultilayerQG Module","text":"with","category":"page"},{"location":"modules/multilayerqg/#","page":"MultilayerQG Module","title":"MultilayerQG Module","text":"F_j+12 k = fracf_0^2g_j+12 H_kquadtextandquad\ng_j+12 = gfracrho_j+1-rho_jrho_j+1 ","category":"page"},{"location":"modules/multilayerqg/#","page":"MultilayerQG Module","title":"MultilayerQG Module","text":"Therefore, in Fourier space the q's and psi's are related through","category":"page"},{"location":"modules/multilayerqg/#","page":"MultilayerQG Module","title":"MultilayerQG Module","text":"beginpmatrix widehatq_boldsymbolk1vdotswidehatq_boldsymbolkn endpmatrix =\nunderbraceleft(-boldsymbolk^2mathbb1 + mathbbF right)_equiv mathbbS_boldsymbolk\nbeginpmatrix widehatpsi_boldsymbolk1vdotswidehatpsi_boldsymbolkn endpmatrix","category":"page"},{"location":"modules/multilayerqg/#","page":"MultilayerQG Module","title":"MultilayerQG Module","text":"where","category":"page"},{"location":"modules/multilayerqg/#","page":"MultilayerQG Module","title":"MultilayerQG Module","text":"mathbbF equiv beginpmatrix\n -F_32 1               F_32 1     0     cdots     0\n  F_32 2  -(F_32 2+F_52 2)  F_52 2         vdots\n 0                             ddots     ddots    ddots  \n vdots                                                      0 \n 0                  cdots                0    F_n-12 n  -F_n-12 n\nendpmatrix","category":"page"},{"location":"modules/multilayerqg/#","page":"MultilayerQG Module","title":"MultilayerQG Module","text":"Including an imposed zonal flow U_j(y) in each layer the equations of motion are:","category":"page"},{"location":"modules/multilayerqg/#","page":"MultilayerQG Module","title":"MultilayerQG Module","text":"partial_t q_j + mathsfJ(psi_j q_j ) + (U_j - partial_ypsi_j) partial_x Q_j +  U_j partial_x q_j  + (partial_y Q_j)(partial_xpsi_j) = -delta_jnmunabla^2psi_n - nu(-1)^n_nu nabla^2n_nu q_j","category":"page"},{"location":"modules/multilayerqg/#","page":"MultilayerQG Module","title":"MultilayerQG Module","text":"with","category":"page"},{"location":"modules/multilayerqg/#","page":"MultilayerQG Module","title":"MultilayerQG Module","text":"partial_y Q_j equiv beta - partial_y^2 U_j - (1-delta_j1)F_j-12 j (U_j-1-U_j) - (1-delta_jn)F_j+12 j (U_j+1-U_j) + delta_jnpartial_yeta \npartial_x Q_j equiv delta_jnpartial_xeta","category":"page"},{"location":"modules/multilayerqg/#","page":"MultilayerQG Module","title":"MultilayerQG Module","text":"The eddy kinetic energy in each layer is:","category":"page"},{"location":"modules/multilayerqg/#","page":"MultilayerQG Module","title":"MultilayerQG Module","text":"textrmKE_j = dfracH_jH int dfrac12 boldsymbolnablapsi_j^2 fracmathrmd^2boldsymbolxL_x L_yquad j=1dotsn","category":"page"},{"location":"modules/multilayerqg/#","page":"MultilayerQG Module","title":"MultilayerQG Module","text":"while the eddy potential energy related to each of fluid interface is","category":"page"},{"location":"modules/multilayerqg/#","page":"MultilayerQG Module","title":"MultilayerQG Module","text":"textrmPE_j+12 = int dfrac12 dfracf_0^2g_j+12 (psi_j-psi_j+1)^2 fracmathrmd^2boldsymbolxL_x L_yquad j=1dotsn-1","category":"page"},{"location":"modules/multilayerqg/#","page":"MultilayerQG Module","title":"MultilayerQG Module","text":"The lateral eddy fluxes in each layer are:","category":"page"},{"location":"modules/multilayerqg/#","page":"MultilayerQG Module","title":"MultilayerQG Module","text":"textrmlateralfluxes_j = dfracH_jH int U_jupsilon_j partial_y u_j fracmathrmd^2boldsymbolxL_x L_yquad j=1dotsn","category":"page"},{"location":"modules/multilayerqg/#","page":"MultilayerQG Module","title":"MultilayerQG Module","text":"while the vertical fluxes accros fluid interfaces are:","category":"page"},{"location":"modules/multilayerqg/#","page":"MultilayerQG Module","title":"MultilayerQG Module","text":"textrmverticalfluxes_j+12 = int dfracf_0^2g_j+12 H (U_j-U_j+1)upsilon_j+1psi_j fracmathrmd^2boldsymbolxL_x L_yquad j=1dotsn-1\n","category":"page"},{"location":"modules/multilayerqg/#Implementation-1","page":"MultilayerQG Module","title":"Implementation","text":"","category":"section"},{"location":"modules/multilayerqg/#","page":"MultilayerQG Module","title":"MultilayerQG Module","text":"Matrices mathbbS_boldsymbolk as well as mathbbS^-1_boldsymbolk are included in params as params.S and params.invS respectively.","category":"page"},{"location":"modules/multilayerqg/#","page":"MultilayerQG Module","title":"MultilayerQG Module","text":"You can get widehatpsi_j from widehatq_j with streamfunctionfrompv!(psih, qh, invS, grid), while to go from widehatpsi_j back to widehatq_j pvfromstreamfunction!(qh, psih, S, grid).","category":"page"},{"location":"modules/multilayerqg/#","page":"MultilayerQG Module","title":"MultilayerQG Module","text":"The equations are time-stepped forward in Fourier space:","category":"page"},{"location":"modules/multilayerqg/#","page":"MultilayerQG Module","title":"MultilayerQG Module","text":"partial_t widehatq_j = - widehatmathsfJ(psi_j q_j)  - widehatU_j partial_x Q_j - widehatU_j partial_x q_j\n+ widehat(partial_ypsi_j) partial_x Q_j  - widehat(partial_xpsi_j)(partial_y Q_j) + delta_jnmu k^2 widehatpsi_n - nu k^2n_nu widehatq_j","category":"page"},{"location":"modules/multilayerqg/#","page":"MultilayerQG Module","title":"MultilayerQG Module","text":"In doing so the Jacobian is computed in the conservative form: mathsfJ(fg) = partial_y  (partial_x f) g -partial_x (partial_y f) g.","category":"page"},{"location":"modules/multilayerqg/#","page":"MultilayerQG Module","title":"MultilayerQG Module","text":"Thus:","category":"page"},{"location":"modules/multilayerqg/#","page":"MultilayerQG Module","title":"MultilayerQG Module","text":"mathcalL = - nu k^2n_nu ","category":"page"},{"location":"modules/multilayerqg/#","page":"MultilayerQG Module","title":"MultilayerQG Module","text":"mathcalN(widehatq_j) = - widehatmathsfJ(psi_j q_j) - widehatU_j partial_x Q_j - widehatU_j partial_x q_j\n + widehat(partial_ypsi_j)(partial_x Q_j) - widehat(partial_xpsi_j)(partial_y Q_j) + delta_jnmu k^2 widehatpsi_n ","category":"page"},{"location":"modules/multilayerqg/#Examples-1","page":"MultilayerQG Module","title":"Examples","text":"","category":"section"},{"location":"modules/multilayerqg/#","page":"MultilayerQG Module","title":"MultilayerQG Module","text":"examples/multilayerqg_2layer.jl: A script that simulates baroclinic eddy turbulence growth and equilibration of the Phillips 2-layer model..","category":"page"},{"location":"basics/#Code-Basics-1","page":"Code Basics","title":"Code Basics","text":"","category":"section"},{"location":"basics/#Basic-Notation-1","page":"Code Basics","title":"Basic Notation","text":"","category":"section"},{"location":"basics/#","page":"Code Basics","title":"Code Basics","text":"The code solves partial differential equations of the general form:","category":"page"},{"location":"basics/#","page":"Code Basics","title":"Code Basics","text":"partial_t u = mathcalLu + mathcalN(u) ","category":"page"},{"location":"basics/#","page":"Code Basics","title":"Code Basics","text":"(Note: ODEs are special cases of the above. Thus the code also solves ODEs.)","category":"page"},{"location":"basics/#","page":"Code Basics","title":"Code Basics","text":"We decompose the right hand side of the above in a linear part (mathcalLu) and a nonlinear part (mathcalN(u)). The time steppers treat the linear and nonlinear parts differently.","category":"page"},{"location":"basics/#","page":"Code Basics","title":"Code Basics","text":"Boundary conditions in all spatial dimensions are periodic. That allows us to expand all variables using a Fourier decomposition. For example, a variable phi(x t) that depends in one spatial dimension is expanded as:","category":"page"},{"location":"basics/#","page":"Code Basics","title":"Code Basics","text":"phi(x t) = sum_k widehatphi(k t)e^mathrmi k x ","category":"page"},{"location":"basics/#","page":"Code Basics","title":"Code Basics","text":"where wavenumbers k take the values tfrac2piL_x0pm 1pm 2dots. The equation is time-stepped forward in Fourier space. That way u becomes the array with all Fourier coefficients of the solution.","category":"page"},{"location":"basics/#","page":"Code Basics","title":"Code Basics","text":"The coefficients for the linear operator mathcalL are stored in an array called LC. The term mathcalN(u) is computed for by calling the function calcN!.","category":"page"},{"location":"basics/#Abstract-SuperTypes-1","page":"Code Basics","title":"Abstract SuperTypes","text":"","category":"section"},{"location":"basics/#","page":"Code Basics","title":"Code Basics","text":"The code is divided along conceptual lines into problem-agnostic and problem-specific components. Files that contain problem-agnostic parts of the code are stored in /src. Files in /src define the domain, 'AbstractTypes' that supertype problem-specific types, and time-stepper types and routines. Problem-specific modules are stored in /src/physics.","category":"page"},{"location":"basics/#","page":"Code Basics","title":"Code Basics","text":"Below is a list of all Abstract Supertypes used by the code:","category":"page"},{"location":"basics/#","page":"Code Basics","title":"Code Basics","text":"AbstractGrid: Includes all variables that have to do with the grid, both in physical space as well as in wavenumber space. Currently implemented are: ZeroGrid for ODEs, OneGrid for PDEs with one spatial dimension, and TwoGrid for PDEs with two spatial dimensions. Grids are generic and work for any problem of that particular dimension.\nAbstractParams: Includes all parameters or functions related with the problem do not vary throughout the integration.\nAbstractVars: Includes all variables of the problem that change along the integration.\nAbstractEquation: Includes the array with the coefficients of the linear part of the equation, LC as well as function calcN! that computes the nonlinear part of the equation.\nAbstractState: Includes the solution sol at current time-step as well as the time-step dt, the time t, and step which counts the number of time-steps taken.\nAbstractTimeStepper: Includes all details for the time-stepper (e.g., dt, various coefficients, sol at intermediate time-step values). Time-steppers are generic and work for any problem.\nAbstractProblem: A super-supertype that includes all of the above. That is problem includes grid, vars, params, eqn, ts, state, and also t and step.","category":"page"},{"location":"basics/#","page":"Code Basics","title":"Code Basics","text":"Grids and time-steppers are generic and work for any problem of that particular dimension. State and Problem just gathers things together. Thus, to write a solver for a new physical problem you only need to prescribe params, vars, the coefficients of the linear part, LC, and function calcN!.","category":"page"},{"location":"basics/#Source-code-organization-1","page":"Code Basics","title":"Source code organization","text":"","category":"section"},{"location":"basics/#","page":"Code Basics","title":"Code Basics","text":"The code is divided along conceptual lines into problem-agnostic and problem-specific components. Files that contain problem-agnostic parts of the code are stored in /src. Files in /src define the domain, 'AbstractTypes' that supertype problem-specific types, and time-stepper types and routines. Problem-specific modules are stores in /src/physics.","category":"page"},{"location":"basics/#","page":"Code Basics","title":"Code Basics","text":"Here's an overview of the code structure:","category":"page"},{"location":"basics/#","page":"Code Basics","title":"Code Basics","text":"/src/\nFourierFlows.jl\nDefines supertyping AbstractParams, AbstractGrid, etc.\nDefines a Problem type to organize the grid, vars, params, equation, and timestepper into a single structure.\nIncludes all sources files and physics files.\ntimesteppers.jl: defines modules and stepforward! routines for   various time-steppers. Current implemented time-steppers are:\nForward Euler\n3rd-order Adams-Bashforth (AB3)\n4th-order Runge-Kutta (RK4)\n4th-order Runge-Kutta Exponential Time Differencing (ETDRK4)\n4th-order Dual Runge-Kutta (DualRK4)\n4th-order Dual Runge-Kutta Exponential Time Differencing (DualETDRK4)\nFor each time-stepper exists also a \"filtered\" version that filters out high-wavenumber spectral components of the solution. The Dual time-steppers evolve a state variable that comprises both of real valued         and complex valued fields.\nphysics/\ntwodnavierstokes.jl: Defines a TwoDNavierStokes module that provides a solver for the two-dimensional vorticity equation.\nbarotropicqg.jl: Defines a BarotropicQG module that provides several solvers for the barotropic QG model that permit beta, topography, beta + topography, and forcing.\nkuramotosivashinsky.jl: Defines a KuramotoSivashinsky module that solves the Kuramoto-Sivashinsky.\nverticallyfourierboussinesq.jl: Defines a VerticallyFourierBoussinesq module that solves the two-mode truncation of the Fourier series thin-layer approximation to the hydrostatic Boussinesq equations.\nverticallycosinerboussinesq.jl: Defines a VerticallyCosineBoussinesq module that solves the two-mode truncation of the Sin/Cos series thin-layer approximation to the hydrostatic Boussinesq equations.\ntraceradvdiff.jl: Defines a TracerAdvDiff module that provides a solver for a two-dimensional and periodic tracer field in a given 2D flow (u, w), which can be an arbitrary function of x, z, and t.","category":"page"},{"location":"basics/#Basic-steps-for-solving-a-problem:-step-through-an-example-script-1","page":"Code Basics","title":"Basic steps for solving a problem: step through an example script","text":"","category":"section"},{"location":"basics/#","page":"Code Basics","title":"Code Basics","text":"To illustrate the basic steps for solving a problem consider the 1D Kuramoto-Sivashinsky equation for u(x t):","category":"page"},{"location":"basics/#","page":"Code Basics","title":"Code Basics","text":"partial_t u + partial_x^4 u + partial_x^2 u + upartial_x u = 0 ","category":"page"},{"location":"basics/#","page":"Code Basics","title":"Code Basics","text":"which in Fourier base reads:","category":"page"},{"location":"basics/#","page":"Code Basics","title":"Code Basics","text":"partial_t widehatu = underbrace(- k_x^4 + k_x^2) widehatu_mathcalLwidehatu\n+ underbracewidehat -upartial_x u _mathcalN(widehatu) ","category":"page"},{"location":"basics/#","page":"Code Basics","title":"Code Basics","text":"The steps to construct an AbstractProblem for the above are:","category":"page"},{"location":"basics/#","page":"Code Basics","title":"Code Basics","text":"Construct an AbstractGrid; for this problem we use the OneGrid.\nConstruct an AbstractParams; for this problem params is be empty as there are no parameters in the equation. (Note that e.g., the domain size Lx and the number of gridpoints nx belong to the grid.)\nConstruct an AbstractVars; for this problem vars includes u, partial_x u, upartial_x u and their Fourier transforms widehatu, widehatpartial_x u, widehatupartial_xu.\nConstruct the equations by prescribing coefficients for the linear part as an array LC and a function calcN! that computes mathcalN(widehatu).\nConstruct the time-stepper which includes function stepforward! that time-steps the solution.\nConstruct the state and gather everything as an AbstractProblem.","category":"page"},{"location":"basics/#","page":"Code Basics","title":"Code Basics","text":"The example script found in  examples/kuramotosivashinsky/trefethenexample.jl demonstrates the above steps needed to construct an AbstractProblem. The prob is constructed by calling prob = InitialValueProblem(nx=nx, Lx=Lx, dt=dt, stepper=\"ETDRK4\"). Looking into the  InitialValueProblem function we can see the above steps:","category":"page"},{"location":"basics/#","page":"Code Basics","title":"Code Basics","text":"function InitialValueProblem(;\n     nx = 256,\n     Lx = 2π,\n     dt = 0.01,\nstepper = \"RK4\"\n)\n\ng  = OneDGrid(nx, Lx)\npr = Params()\nvs = Vars(g)\neq = Equation(pr, g)\nts = FourierFlows.autoconstructtimestepper(stepper, dt, eq.LC, g)\n\nFourierFlows.Problem(g, vs, pr, eq, ts)\nend","category":"page"},{"location":"basics/#","page":"Code Basics","title":"Code Basics","text":"The OneDGrid function is called for the grid. Within grid the wavenumber array is constructed:","category":"page"},{"location":"basics/#","page":"Code Basics","title":"Code Basics","text":"i1 = 0:Int(nx/2)\ni2 = Int(-nx/2+1):-1\nk = Array{T}(2π/Lx*cat(1, i1, i2))\nkr = Array{T}(2π/Lx*cat(1, i1))","category":"page"},{"location":"basics/#","page":"Code Basics","title":"Code Basics","text":"For real-valued fields we use rfft and thus only positive wavenumbers are involved: array kr. E.g., for nx=8 and Lx=2π the wavenumber grids are: k = [0, 1, 2, 3, 4, -3, -2, -1] and kr = [0, 1, 2, 3, 4].","category":"page"},{"location":"basics/#","page":"Code Basics","title":"Code Basics","text":"The construction of the grids only works for even number of grid points. Moreover, since the code relies on the mathrmFFT algorithm, we suggest you use a power of 2 as the number of grid points, since then mathrmFFT is most efficient. ","category":"page"},{"location":"basics/#","page":"Code Basics","title":"Code Basics","text":"Function Vars(g) initialize variables u, ux, and uux as real valued arrays of length nx and variables uh, uxh, and uuxh as complex valued arrays of length nkr = Int(nx/2+1) (the same length as kr). As a general convention variable names with h denote the Fourier transforms of the corresponding variable (h stands for 'hat').","category":"page"},{"location":"basics/#","page":"Code Basics","title":"Code Basics","text":"The array LC is constructed by Equation function","category":"page"},{"location":"basics/#","page":"Code Basics","title":"Code Basics","text":"function Equation(p, g)\n  LC = @. g.kr^2 - g.kr^4\n  FourierFlows.Equation(LC, calcN!)\nend","category":"page"},{"location":"basics/#","page":"Code Basics","title":"Code Basics","text":"Also eq includes function calcN! which computes the nonlinear term mathcalN(widehatu):","category":"page"},{"location":"basics/#","page":"Code Basics","title":"Code Basics","text":"function calcN!(N, sol, t, s, v, p, g)\n  @. v.uh = sol\n  @. v.uxh = im*g.kr*sol\n  A_mul_B!(v.u, g.irfftplan, v.uh)\n  A_mul_B!(v.ux, g.irfftplan, v.uxh)\n  @. v.uux = v.u*v.ux\n  A_mul_B!(v.uuxh, g.rfftplan, v.uux)\n  @. N = -v.uuxh\n  dealias!(N, g)\n  nothing\nend","category":"page"},{"location":"basics/#","page":"Code Basics","title":"Code Basics","text":"The time-stepper is constructed and stored as ts. Finally, all supertypes are gathered together as an AbstractProblem.","category":"page"},{"location":"basics/#Tutorials-1","page":"Code Basics","title":"Tutorials","text":"","category":"section"},{"location":"basics/#","page":"Code Basics","title":"Code Basics","text":"Pages = [\n    \"modules/twodnavierstokes.md\",\n    \"modules/barotropicqg.md\",\n    \"modules/multilayerqg.md\",\n    \"modules/barotropicqgql.md\"\n        ]\nDepth = 1","category":"page"},{"location":"man/functions/#Functions-1","page":"Functions","title":"Functions","text":"","category":"section"},{"location":"man/functions/#Functions-exported-from-GeophysicalFlows:-1","page":"Functions","title":"Functions exported from GeophysicalFlows:","text":"","category":"section"},{"location":"man/functions/#","page":"Functions","title":"Functions","text":"Modules = [GeophysicalFlows]\nPrivate = false\nOrder = [:function]","category":"page"},{"location":"man/functions/#Functions-exported-from-TwoDNavierStokes:-1","page":"Functions","title":"Functions exported from TwoDNavierStokes:","text":"","category":"section"},{"location":"man/functions/#","page":"Functions","title":"Functions","text":"Modules = [GeophysicalFlows.TwoDNavierStokes]\nPrivate = false\nOrder = [:function]","category":"page"},{"location":"man/functions/#GeophysicalFlows.TwoDNavierStokes.Problem-Tuple{}","page":"Functions","title":"GeophysicalFlows.TwoDNavierStokes.Problem","text":"Problem(; parameters...)\n\nConstruct a 2D turbulence problem.\n\n\n\n\n\n","category":"method"},{"location":"man/functions/#GeophysicalFlows.TwoDNavierStokes.dissipation-Tuple{Any}","page":"Functions","title":"GeophysicalFlows.TwoDNavierStokes.dissipation","text":"dissipation(prob)\n\nReturns the domain-averaged dissipation rate. nν must be >= 1.\n\n\n\n\n\n","category":"method"},{"location":"man/functions/#GeophysicalFlows.TwoDNavierStokes.drag-Tuple{Any}","page":"Functions","title":"GeophysicalFlows.TwoDNavierStokes.drag","text":"drag(prob)\n\nReturns the extraction of domain-averaged energy by drag/hypodrag μ.\n\n\n\n\n\n","category":"method"},{"location":"man/functions/#GeophysicalFlows.TwoDNavierStokes.energy-Tuple{Any}","page":"Functions","title":"GeophysicalFlows.TwoDNavierStokes.energy","text":"energy(prob)\n\nReturns the domain-averaged kinetic energy in the Fourier-transformed vorticity solution sol.\n\n\n\n\n\n","category":"method"},{"location":"man/functions/#GeophysicalFlows.TwoDNavierStokes.enstrophy-Tuple{Any}","page":"Functions","title":"GeophysicalFlows.TwoDNavierStokes.enstrophy","text":"enstrophy(prob)\n\nReturns the domain-averaged enstrophy in the Fourier-transformed vorticity solution sol.\n\n\n\n\n\n","category":"method"},{"location":"man/functions/#GeophysicalFlows.TwoDNavierStokes.set_zeta!-Tuple{Any,Any}","page":"Functions","title":"GeophysicalFlows.TwoDNavierStokes.set_zeta!","text":"set_zeta!(prob, zeta)\n\nSet the solution sol as the transform of zeta and update variables v on the grid g.\n\n\n\n\n\n","category":"method"},{"location":"man/functions/#GeophysicalFlows.TwoDNavierStokes.updatevars!-Tuple{Any}","page":"Functions","title":"GeophysicalFlows.TwoDNavierStokes.updatevars!","text":"updatevars!(prob)\n\nUpdate the vars in v on the grid g with the solution in sol.\n\n\n\n\n\n","category":"method"},{"location":"man/functions/#GeophysicalFlows.TwoDNavierStokes.work-Tuple{Any,GeophysicalFlows.TwoDNavierStokes.Vars{#s28,#s27,#s26,Nothing} where #s26<:AbstractArray where #s27<:AbstractArray where #s28<:AbstractArray,Any}","page":"Functions","title":"GeophysicalFlows.TwoDNavierStokes.work","text":"work(prob)\nwork(sol, v, g)\n\nReturns the domain-averaged rate of work of energy by the forcing Fh.\n\n\n\n\n\n","category":"method"},{"location":"man/functions/#Functions-exported-from-BarotropicQG:-1","page":"Functions","title":"Functions exported from BarotropicQG:","text":"","category":"section"},{"location":"man/functions/#","page":"Functions","title":"Functions","text":"Modules = [GeophysicalFlows.BarotropicQG]\nPrivate = false\nOrder = [:function]","category":"page"},{"location":"man/functions/#GeophysicalFlows.BarotropicQG.dissipation-NTuple{4,Any}","page":"Functions","title":"GeophysicalFlows.BarotropicQG.dissipation","text":"dissipation(prob)\ndissipation(s, v, p, g)\n\nReturns the domain-averaged dissipation rate. nν must be >= 1.\n\n\n\n\n\n","category":"method"},{"location":"man/functions/#GeophysicalFlows.BarotropicQG.drag-Tuple{Any}","page":"Functions","title":"GeophysicalFlows.BarotropicQG.drag","text":"drag(prob)\ndrag(s, v, p, g)\n\nReturns the extraction of domain-averaged energy by drag μ.\n\n\n\n\n\n","category":"method"},{"location":"man/functions/#GeophysicalFlows.BarotropicQG.energy-Tuple{Any}","page":"Functions","title":"GeophysicalFlows.BarotropicQG.energy","text":"Calculate the domain-averaged kinetic energy.\n\n\n\n\n\n","category":"method"},{"location":"man/functions/#GeophysicalFlows.BarotropicQG.enstrophy-Tuple{Any}","page":"Functions","title":"GeophysicalFlows.BarotropicQG.enstrophy","text":"Returns the domain-averaged enstrophy.\n\n\n\n\n\n","category":"method"},{"location":"man/functions/#GeophysicalFlows.BarotropicQG.meanenergy-Tuple{Any}","page":"Functions","title":"GeophysicalFlows.BarotropicQG.meanenergy","text":"Returns the energy of the domain-averaged U.\n\n\n\n\n\n","category":"method"},{"location":"man/functions/#GeophysicalFlows.BarotropicQG.meanenstrophy-Tuple{Any}","page":"Functions","title":"GeophysicalFlows.BarotropicQG.meanenstrophy","text":"Returns the enstrophy of the domain-averaged U.\n\n\n\n\n\n","category":"method"},{"location":"man/functions/#GeophysicalFlows.BarotropicQG.set_zeta!-Tuple{Any,GeophysicalFlows.BarotropicQG.Vars,Any,Any,Any}","page":"Functions","title":"GeophysicalFlows.BarotropicQG.set_zeta!","text":"set_zeta!(prob, zeta)\nset_zeta!(s, v, g, zeta)\n\nSet the solution sol as the transform of zeta and update variables v on the grid g.\n\n\n\n\n\n","category":"method"},{"location":"man/functions/#GeophysicalFlows.BarotropicQG.updatevars!-NTuple{4,Any}","page":"Functions","title":"GeophysicalFlows.BarotropicQG.updatevars!","text":"updatevars!(v, s, g)\n\nUpdate the vars in v on the grid g with the solution in sol.\n\n\n\n\n\n","category":"method"},{"location":"man/functions/#GeophysicalFlows.BarotropicQG.work-Tuple{Any,GeophysicalFlows.BarotropicQG.Vars{#s35,#s34,#s33,#s32,Nothing} where #s32<:AbstractArray where #s33<:AbstractArray where #s34<:AbstractArray where #s35<:AbstractArray,Any}","page":"Functions","title":"GeophysicalFlows.BarotropicQG.work","text":"work(prob)\nwork(s, v, p, g)\n\nReturns the domain-averaged rate of work of energy by the forcing Fqh.\n\n\n\n\n\n","category":"method"},{"location":"man/functions/#Functions-exported-from-BarotropicQGQL:-1","page":"Functions","title":"Functions exported from BarotropicQGQL:","text":"","category":"section"},{"location":"man/functions/#","page":"Functions","title":"Functions","text":"Modules = [GeophysicalFlows.BarotropicQGQL]\nPrivate = false\nOrder = [:function]","category":"page"},{"location":"man/functions/#GeophysicalFlows.BarotropicQGQL.Problem-Tuple{}","page":"Functions","title":"GeophysicalFlows.BarotropicQGQL.Problem","text":"Problem(; parameters...)\n\nConstruct a BarotropicQGQL turbulence problem.\n\n\n\n\n\n","category":"method"},{"location":"man/functions/#GeophysicalFlows.BarotropicQGQL.dissipation-NTuple{4,Any}","page":"Functions","title":"GeophysicalFlows.BarotropicQGQL.dissipation","text":"dissipation(prob)\ndissipation(sol, v, p, g)\n\nReturns the domain-averaged dissipation rate. nnu must be >= 1.\n\n\n\n\n\n","category":"method"},{"location":"man/functions/#GeophysicalFlows.BarotropicQGQL.drag-Tuple{Any}","page":"Functions","title":"GeophysicalFlows.BarotropicQGQL.drag","text":"drag(prob)\ndrag(sol, v, p, g)\n\nReturns the extraction of domain-averaged energy by drag mu.\n\n\n\n\n\n","category":"method"},{"location":"man/functions/#GeophysicalFlows.BarotropicQGQL.energy-Tuple{Any}","page":"Functions","title":"GeophysicalFlows.BarotropicQGQL.energy","text":"Calculate the domain-averaged kinetic energy.\n\n\n\n\n\n","category":"method"},{"location":"man/functions/#GeophysicalFlows.BarotropicQGQL.enstrophy-Tuple{Any}","page":"Functions","title":"GeophysicalFlows.BarotropicQGQL.enstrophy","text":"Returns the domain-averaged enstrophy.\n\n\n\n\n\n","category":"method"},{"location":"man/functions/#GeophysicalFlows.BarotropicQGQL.set_zeta!-NTuple{5,Any}","page":"Functions","title":"GeophysicalFlows.BarotropicQGQL.set_zeta!","text":"set_zeta!(prob, zeta)\nset_zeta!(sol, v, g, zeta)\n\nSet the solution sol as the transform of zeta and update variables v on the grid g.\n\n\n\n\n\n","category":"method"},{"location":"man/functions/#GeophysicalFlows.BarotropicQGQL.updatevars!-NTuple{4,Any}","page":"Functions","title":"GeophysicalFlows.BarotropicQGQL.updatevars!","text":"updatevars!(v, s, g)\n\nUpdate the vars in v on the grid g with the solution in sol.\n\n\n\n\n\n","category":"method"},{"location":"man/functions/#GeophysicalFlows.BarotropicQGQL.work-Tuple{Any,GeophysicalFlows.BarotropicQGQL.ForcedVars,Any}","page":"Functions","title":"GeophysicalFlows.BarotropicQGQL.work","text":"work(prob)\nwork(sol, v, p, g)\n\nReturns the domain-averaged rate of work of energy by the forcing Fh.\n\n\n\n\n\n","category":"method"},{"location":"man/functions/#Functions-exported-from-MultilayerQG:-1","page":"Functions","title":"Functions exported from MultilayerQG:","text":"","category":"section"},{"location":"man/functions/#","page":"Functions","title":"Functions","text":"Modules = [GeophysicalFlows.MultilayerQG]\nPrivate = false\nOrder = [:function]","category":"page"},{"location":"man/functions/#GeophysicalFlows.MultilayerQG.energies-Tuple{Any}","page":"Functions","title":"GeophysicalFlows.MultilayerQG.energies","text":"energies(prob)\n\nReturns the kinetic energy of each fluid layer KE1,...,KEnlayers, and the potential energy of each fluid interface PE{3/2},...,PE{nlayers-1/2}.\n\n\n\n\n\n","category":"method"},{"location":"man/functions/#GeophysicalFlows.MultilayerQG.fluxes-Tuple{Any}","page":"Functions","title":"GeophysicalFlows.MultilayerQG.fluxes","text":"fluxes(prob)\n\nReturns the lateral eddy fluxes within each fluid layer lateralfluxes1,...,lateralfluxesnlayers and also the vertical eddy fluxes for each fluid interface verticalfluxes{3/2},...,verticalfluxes{nlayers-1/2}\n\n\n\n\n\n","category":"method"},{"location":"man/functions/#GeophysicalFlows.MultilayerQG.set_psi!-Tuple{Any,Any}","page":"Functions","title":"GeophysicalFlows.MultilayerQG.set_psi!","text":"set_psi!(prob)\n\nSet the solution prob.sol to correspond to a streamfunction psi and updates variables.\n\n\n\n\n\n","category":"method"},{"location":"man/functions/#GeophysicalFlows.MultilayerQG.set_q!-Tuple{Any,Any}","page":"Functions","title":"GeophysicalFlows.MultilayerQG.set_q!","text":"set_q!(prob)\n\nSet the solution prob.sol as the transform of q and updates variables.\n\n\n\n\n\n","category":"method"},{"location":"man/functions/#GeophysicalFlows.MultilayerQG.updatevars!-Tuple{Any}","page":"Functions","title":"GeophysicalFlows.MultilayerQG.updatevars!","text":"updatevars!(prob)\n\nUpdate prob.vars using prob.sol.\n\n\n\n\n\n","category":"method"},{"location":"generated/barotropicqg_betaforced/#","page":"Forced-dissipative barotropic quasi-geostropic turbulence on a beta-plane","title":"Forced-dissipative barotropic quasi-geostropic turbulence on a beta-plane","text":"EditURL = \"https://github.com/FourierFlows/GeophysicalFlows.jl/blob/master/examples/barotropicqg_betaforced.jl\"","category":"page"},{"location":"generated/barotropicqg_betaforced/#Forced-dissipative-barotropic-quasi-geostropic-turbulence-on-a-beta-plane-1","page":"Forced-dissipative barotropic quasi-geostropic turbulence on a beta-plane","title":"Forced-dissipative barotropic quasi-geostropic turbulence on a beta-plane","text":"","category":"section"},{"location":"generated/barotropicqg_betaforced/#","page":"Forced-dissipative barotropic quasi-geostropic turbulence on a beta-plane","title":"Forced-dissipative barotropic quasi-geostropic turbulence on a beta-plane","text":"In this example, we simulate forced-dissipative barotropic quasi-geostrophic turbulence on a beta plane. The dynamics include linear drag and stochastic excitation.","category":"page"},{"location":"generated/barotropicqg_betaforced/#","page":"Forced-dissipative barotropic quasi-geostropic turbulence on a beta-plane","title":"Forced-dissipative barotropic quasi-geostropic turbulence on a beta-plane","text":"using FourierFlows, PyPlot, JLD2, Statistics, Printf, Random\n\nusing FFTW: irfft\nusing Statistics: mean\nimport Random: seed!\n\nimport GeophysicalFlows.BarotropicQG\nimport GeophysicalFlows.BarotropicQG: energy, enstrophy","category":"page"},{"location":"generated/barotropicqg_betaforced/#Choosing-a-device:-CPU-or-GPU-1","page":"Forced-dissipative barotropic quasi-geostropic turbulence on a beta-plane","title":"Choosing a device: CPU or GPU","text":"","category":"section"},{"location":"generated/barotropicqg_betaforced/#","page":"Forced-dissipative barotropic quasi-geostropic turbulence on a beta-plane","title":"Forced-dissipative barotropic quasi-geostropic turbulence on a beta-plane","text":"dev = CPU()    # Device (CPU/GPU)\nnothing # hide","category":"page"},{"location":"generated/barotropicqg_betaforced/#Numerical-parameters-and-time-stepping-parameters-1","page":"Forced-dissipative barotropic quasi-geostropic turbulence on a beta-plane","title":"Numerical parameters and time-stepping parameters","text":"","category":"section"},{"location":"generated/barotropicqg_betaforced/#","page":"Forced-dissipative barotropic quasi-geostropic turbulence on a beta-plane","title":"Forced-dissipative barotropic quasi-geostropic turbulence on a beta-plane","text":"nx = 128       # 2D resolution = nx^2\nstepper = \"FilteredRK4\"   # timestepper\ndt  = 0.05     # timestep\nnsteps = 8000  # total number of time-steps\nnsubs  = 2000  # number of time-steps for intermediate logging/plotting (nsteps must be multiple of nsubs)\nnothing # hide","category":"page"},{"location":"generated/barotropicqg_betaforced/#Physical-parameters-1","page":"Forced-dissipative barotropic quasi-geostropic turbulence on a beta-plane","title":"Physical parameters","text":"","category":"section"},{"location":"generated/barotropicqg_betaforced/#","page":"Forced-dissipative barotropic quasi-geostropic turbulence on a beta-plane","title":"Forced-dissipative barotropic quasi-geostropic turbulence on a beta-plane","text":"Lx = 2π        # domain size\n ν = 0.0       # viscosity\nnν = 1         # viscosity order\n β = 10.0      # planetary PV gradient\n μ = 0.01      # bottom drag\nnothing # hide","category":"page"},{"location":"generated/barotropicqg_betaforced/#Forcing-1","page":"Forced-dissipative barotropic quasi-geostropic turbulence on a beta-plane","title":"Forcing","text":"","category":"section"},{"location":"generated/barotropicqg_betaforced/#","page":"Forced-dissipative barotropic quasi-geostropic turbulence on a beta-plane","title":"Forced-dissipative barotropic quasi-geostropic turbulence on a beta-plane","text":"We force the vorticity equation with stochastic excitation that is delta-correlated in time and while spatially homogeneously and isotropically correlated. The forcing has a spectrum with power in a ring in wavenumber space of radious k_f and width delta k_f, and it injects energy per unit area and per unit time equal to varepsilon.","category":"page"},{"location":"generated/barotropicqg_betaforced/#","page":"Forced-dissipative barotropic quasi-geostropic turbulence on a beta-plane","title":"Forced-dissipative barotropic quasi-geostropic turbulence on a beta-plane","text":"kf, dkf = 14.0, 1.5     # forcing wavenumber and width of forcing ring in wavenumber space\nε = 0.001               # energy input rate by the forcing\n\ngr  = TwoDGrid(nx, Lx)\n\nx, y = gridpoints(gr)\nKr = [ gr.kr[i] for i=1:gr.nkr, j=1:gr.nl]\n\nforcingcovariancespectrum = @. exp(-(sqrt(gr.Krsq)-kf)^2/(2*dkf^2))\n@. forcingcovariancespectrum[gr.Krsq < 2.0^2 ] .= 0\n@. forcingcovariancespectrum[gr.Krsq > 20.0^2 ] .= 0\nforcingcovariancespectrum[Kr .< 2π/Lx] .= 0\nε0 = FourierFlows.parsevalsum(forcingcovariancespectrum.*gr.invKrsq/2.0, gr)/(gr.Lx*gr.Ly)\nforcingcovariancespectrum .= ε/ε0 * forcingcovariancespectrum  # normalization so that forcing injects energy ε per domain area per unit time\n\nseed!(1234) # reset of the random number generator for reproducibility\nnothing # hide","category":"page"},{"location":"generated/barotropicqg_betaforced/#","page":"Forced-dissipative barotropic quasi-geostropic turbulence on a beta-plane","title":"Forced-dissipative barotropic quasi-geostropic turbulence on a beta-plane","text":"Next we construct function calcF! that computes a forcing realization every timestep","category":"page"},{"location":"generated/barotropicqg_betaforced/#","page":"Forced-dissipative barotropic quasi-geostropic turbulence on a beta-plane","title":"Forced-dissipative barotropic quasi-geostropic turbulence on a beta-plane","text":"function calcFq!(Fh, sol, t, cl, v, p, g)\n  ξ = ArrayType(dev)(exp.(2π*im*rand(Float64, size(sol)))/sqrt(cl.dt))\n  ξ[1, 1] = 0\n  @. Fh = ξ*sqrt(forcingcovariancespectrum)\n  Fh[abs.(Kr).==0] .= 0\n  nothing\nend\nnothing # hide","category":"page"},{"location":"generated/barotropicqg_betaforced/#Problem-setup-1","page":"Forced-dissipative barotropic quasi-geostropic turbulence on a beta-plane","title":"Problem setup","text":"","category":"section"},{"location":"generated/barotropicqg_betaforced/#","page":"Forced-dissipative barotropic quasi-geostropic turbulence on a beta-plane","title":"Forced-dissipative barotropic quasi-geostropic turbulence on a beta-plane","text":"We initialize a Problem by providing a set of keyword arguments. The stepper keyword defines the time-stepper to be used.","category":"page"},{"location":"generated/barotropicqg_betaforced/#","page":"Forced-dissipative barotropic quasi-geostropic turbulence on a beta-plane","title":"Forced-dissipative barotropic quasi-geostropic turbulence on a beta-plane","text":"prob = BarotropicQG.Problem(nx=nx, Lx=Lx, β=β, ν=ν, nν=nν, μ=μ, dt=dt,\n                            stepper=stepper, calcFq=calcFq!, stochastic=true, dev=dev)\nnothing # hide","category":"page"},{"location":"generated/barotropicqg_betaforced/#","page":"Forced-dissipative barotropic quasi-geostropic turbulence on a beta-plane","title":"Forced-dissipative barotropic quasi-geostropic turbulence on a beta-plane","text":"and define some shortcuts","category":"page"},{"location":"generated/barotropicqg_betaforced/#","page":"Forced-dissipative barotropic quasi-geostropic turbulence on a beta-plane","title":"Forced-dissipative barotropic quasi-geostropic turbulence on a beta-plane","text":"sol, cl, v, p, g = prob.sol, prob.clock, prob.vars, prob.params, prob.grid\nnothing # hide","category":"page"},{"location":"generated/barotropicqg_betaforced/#Setting-initial-conditions-1","page":"Forced-dissipative barotropic quasi-geostropic turbulence on a beta-plane","title":"Setting initial conditions","text":"","category":"section"},{"location":"generated/barotropicqg_betaforced/#","page":"Forced-dissipative barotropic quasi-geostropic turbulence on a beta-plane","title":"Forced-dissipative barotropic quasi-geostropic turbulence on a beta-plane","text":"Our initial condition is simply fluid at rest.","category":"page"},{"location":"generated/barotropicqg_betaforced/#","page":"Forced-dissipative barotropic quasi-geostropic turbulence on a beta-plane","title":"Forced-dissipative barotropic quasi-geostropic turbulence on a beta-plane","text":"BarotropicQG.set_zeta!(prob, 0*x)","category":"page"},{"location":"generated/barotropicqg_betaforced/#Diagnostics-1","page":"Forced-dissipative barotropic quasi-geostropic turbulence on a beta-plane","title":"Diagnostics","text":"","category":"section"},{"location":"generated/barotropicqg_betaforced/#","page":"Forced-dissipative barotropic quasi-geostropic turbulence on a beta-plane","title":"Forced-dissipative barotropic quasi-geostropic turbulence on a beta-plane","text":"Create Diagnostic – \"energy\" and \"enstrophy\" are functions imported at the top.","category":"page"},{"location":"generated/barotropicqg_betaforced/#","page":"Forced-dissipative barotropic quasi-geostropic turbulence on a beta-plane","title":"Forced-dissipative barotropic quasi-geostropic turbulence on a beta-plane","text":"E = Diagnostic(energy, prob; nsteps=nsteps)\nZ = Diagnostic(enstrophy, prob; nsteps=nsteps)\ndiags = [E, Z] # A list of Diagnostics types passed to \"stepforward!\" will  be updated every timestep.\nnothing # hide","category":"page"},{"location":"generated/barotropicqg_betaforced/#Output-1","page":"Forced-dissipative barotropic quasi-geostropic turbulence on a beta-plane","title":"Output","text":"","category":"section"},{"location":"generated/barotropicqg_betaforced/#","page":"Forced-dissipative barotropic quasi-geostropic turbulence on a beta-plane","title":"Forced-dissipative barotropic quasi-geostropic turbulence on a beta-plane","text":"We choose folder for outputing .jld2 files and snapshots (.png files).","category":"page"},{"location":"generated/barotropicqg_betaforced/#","page":"Forced-dissipative barotropic quasi-geostropic turbulence on a beta-plane","title":"Forced-dissipative barotropic quasi-geostropic turbulence on a beta-plane","text":"filepath = \".\"\nplotpath = \"./plots_forcedbetaturb\"\nplotname = \"snapshots\"\nfilename = joinpath(filepath, \"forcedbetaturb.jld2\")\nnothing # hide","category":"page"},{"location":"generated/barotropicqg_betaforced/#","page":"Forced-dissipative barotropic quasi-geostropic turbulence on a beta-plane","title":"Forced-dissipative barotropic quasi-geostropic turbulence on a beta-plane","text":"Do some basic file management","category":"page"},{"location":"generated/barotropicqg_betaforced/#","page":"Forced-dissipative barotropic quasi-geostropic turbulence on a beta-plane","title":"Forced-dissipative barotropic quasi-geostropic turbulence on a beta-plane","text":"if isfile(filename); rm(filename); end\nif !isdir(plotpath); mkdir(plotpath); end\nnothing # hide","category":"page"},{"location":"generated/barotropicqg_betaforced/#","page":"Forced-dissipative barotropic quasi-geostropic turbulence on a beta-plane","title":"Forced-dissipative barotropic quasi-geostropic turbulence on a beta-plane","text":"And then create Output","category":"page"},{"location":"generated/barotropicqg_betaforced/#","page":"Forced-dissipative barotropic quasi-geostropic turbulence on a beta-plane","title":"Forced-dissipative barotropic quasi-geostropic turbulence on a beta-plane","text":"get_sol(prob) = sol # extracts the Fourier-transformed solution\nget_u(prob) = irfft(im*g.l.*g.invKrsq.*sol, g.nx)\nout = Output(prob, filename, (:sol, get_sol), (:u, get_u))\nnothing # hide","category":"page"},{"location":"generated/barotropicqg_betaforced/#Visualizing-the-simulation-1","page":"Forced-dissipative barotropic quasi-geostropic turbulence on a beta-plane","title":"Visualizing the simulation","text":"","category":"section"},{"location":"generated/barotropicqg_betaforced/#","page":"Forced-dissipative barotropic quasi-geostropic turbulence on a beta-plane","title":"Forced-dissipative barotropic quasi-geostropic turbulence on a beta-plane","text":"We define a function that plots the vorticity and streamfunction fields, their corresponding zonal mean structure and timeseries of energy and enstrophy.","category":"page"},{"location":"generated/barotropicqg_betaforced/#","page":"Forced-dissipative barotropic quasi-geostropic turbulence on a beta-plane","title":"Forced-dissipative barotropic quasi-geostropic turbulence on a beta-plane","text":"function plot_output(prob, fig, axs; drawcolorbar=false)\n  sol, v, p, g = prob.sol, prob.vars, prob.params, prob.grid\n  BarotropicQG.updatevars!(prob)\n\n  sca(axs[1])\n  cla()\n  pcolormesh(x, y, v.q)\n  axis(\"square\")\n  xticks(-2:2:2)\n  yticks(-2:2:2)\n  title(L\"vorticity $\\zeta = \\partial_x v - \\partial_y u$\")\n  if drawcolorbar==true\n    colorbar()\n  end\n\n  sca(axs[2])\n  cla()\n  contourf(x, y, v.psi)\n  if maximum(abs.(v.psi))>0\n    contour(x, y, v.psi, colors=\"k\")\n  end\n  axis(\"square\")\n  xticks(-2:2:2)\n  yticks(-2:2:2)\n  title(L\"streamfunction $\\psi$\")\n  if drawcolorbar==true\n    colorbar()\n  end\n\n  sca(axs[3])\n  cla()\n  plot(Array(transpose(mean(v.zeta, dims=1))), y[1,:])\n  plot(0*y[1,:], y[1,:], \"k--\")\n  ylim(-Lx/2, Lx/2)\n  xlim(-3, 3)\n  title(L\"zonal mean $\\zeta$\")\n\n  sca(axs[4])\n  cla()\n  plot(Array(transpose(mean(v.u, dims=1))), y[1,:])\n  plot(0*y[1,:], y[1,:], \"k--\")\n  ylim(-Lx/2, Lx/2)\n  xlim(-0.5, 0.5)\n  title(L\"zonal mean $u$\")\n\n  sca(axs[5])\n  cla()\n  plot(μ*E.t[1:E.i], E.data[1:E.i], label=\"energy\")\n  xlabel(L\"\\mu t\")\n  legend()\n\n  sca(axs[6])\n  cla()\n  plot(μ*Z.t[1:Z.i], Z.data[1:E.i], label=\"enstrophy\")\n  xlabel(L\"\\mu t\")\n  legend()\nend\nnothing # hide","category":"page"},{"location":"generated/barotropicqg_betaforced/#Time-stepping-the-Problem-forward-1","page":"Forced-dissipative barotropic quasi-geostropic turbulence on a beta-plane","title":"Time-stepping the Problem forward","text":"","category":"section"},{"location":"generated/barotropicqg_betaforced/#","page":"Forced-dissipative barotropic quasi-geostropic turbulence on a beta-plane","title":"Forced-dissipative barotropic quasi-geostropic turbulence on a beta-plane","text":"We time-step the Problem forward in time.","category":"page"},{"location":"generated/barotropicqg_betaforced/#","page":"Forced-dissipative barotropic quasi-geostropic turbulence on a beta-plane","title":"Forced-dissipative barotropic quasi-geostropic turbulence on a beta-plane","text":"startwalltime = time()\n\nwhile cl.step < nsteps\n  stepforward!(prob, diags, nsubs)\n\n  BarotropicQG.updatevars!(prob)\n  cfl = cl.dt*maximum([maximum(v.u)/g.dx, maximum(v.v)/g.dy])\n\n  log = @sprintf(\"step: %04d, t: %d, cfl: %.2f, E: %.4f, Q: %.4f, walltime: %.2f min\",\n    cl.step, cl.t, cfl, E.data[E.i], Z.data[Z.i],\n    (time()-startwalltime)/60)\n  println(log)\nend\nprintln(\"finished\")","category":"page"},{"location":"generated/barotropicqg_betaforced/#Plot-1","page":"Forced-dissipative barotropic quasi-geostropic turbulence on a beta-plane","title":"Plot","text":"","category":"section"},{"location":"generated/barotropicqg_betaforced/#","page":"Forced-dissipative barotropic quasi-geostropic turbulence on a beta-plane","title":"Forced-dissipative barotropic quasi-geostropic turbulence on a beta-plane","text":"Now let's see what we got. We plot the output,","category":"page"},{"location":"generated/barotropicqg_betaforced/#","page":"Forced-dissipative barotropic quasi-geostropic turbulence on a beta-plane","title":"Forced-dissipative barotropic quasi-geostropic turbulence on a beta-plane","text":"fig, axs = subplots(ncols=3, nrows=2, figsize=(14, 8))\nplot_output(prob, fig, axs; drawcolorbar=false)\ngcf() # hide","category":"page"},{"location":"generated/barotropicqg_betaforced/#","page":"Forced-dissipative barotropic quasi-geostropic turbulence on a beta-plane","title":"Forced-dissipative barotropic quasi-geostropic turbulence on a beta-plane","text":"and finally save the figure","category":"page"},{"location":"generated/barotropicqg_betaforced/#","page":"Forced-dissipative barotropic quasi-geostropic turbulence on a beta-plane","title":"Forced-dissipative barotropic quasi-geostropic turbulence on a beta-plane","text":"savename = @sprintf(\"%s_%09d.png\", joinpath(plotpath, plotname), cl.step)\nsavefig(savename)","category":"page"},{"location":"generated/barotropicqg_betaforced/#","page":"Forced-dissipative barotropic quasi-geostropic turbulence on a beta-plane","title":"Forced-dissipative barotropic quasi-geostropic turbulence on a beta-plane","text":"","category":"page"},{"location":"generated/barotropicqg_betaforced/#","page":"Forced-dissipative barotropic quasi-geostropic turbulence on a beta-plane","title":"Forced-dissipative barotropic quasi-geostropic turbulence on a beta-plane","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/barotropicqg_betadecay/#","page":"Decaying barotropic quasi-geostropic turbulence on a beta-plane","title":"Decaying barotropic quasi-geostropic turbulence on a beta-plane","text":"EditURL = \"https://github.com/FourierFlows/GeophysicalFlows.jl/blob/master/examples/barotropicqg_betadecay.jl\"","category":"page"},{"location":"generated/barotropicqg_betadecay/#Decaying-barotropic-quasi-geostropic-turbulence-on-a-beta-plane-1","page":"Decaying barotropic quasi-geostropic turbulence on a beta-plane","title":"Decaying barotropic quasi-geostropic turbulence on a beta-plane","text":"","category":"section"},{"location":"generated/barotropicqg_betadecay/#","page":"Decaying barotropic quasi-geostropic turbulence on a beta-plane","title":"Decaying barotropic quasi-geostropic turbulence on a beta-plane","text":"In this example, we simulate decaying barotropic quasi-geostrophic turbulence on a beta plane.","category":"page"},{"location":"generated/barotropicqg_betadecay/#","page":"Decaying barotropic quasi-geostropic turbulence on a beta-plane","title":"Decaying barotropic quasi-geostropic turbulence on a beta-plane","text":"using FourierFlows, PyPlot, JLD2, Printf, Random\n\nusing Statistics: mean\nusing FFTW: irfft\n\nimport GeophysicalFlows.BarotropicQG\nimport GeophysicalFlows.BarotropicQG: energy, enstrophy","category":"page"},{"location":"generated/barotropicqg_betadecay/#Choosing-a-device:-CPU-or-GPU-1","page":"Decaying barotropic quasi-geostropic turbulence on a beta-plane","title":"Choosing a device: CPU or GPU","text":"","category":"section"},{"location":"generated/barotropicqg_betadecay/#","page":"Decaying barotropic quasi-geostropic turbulence on a beta-plane","title":"Decaying barotropic quasi-geostropic turbulence on a beta-plane","text":"dev = CPU()     # Device (CPU/GPU)\nnothing # hide","category":"page"},{"location":"generated/barotropicqg_betadecay/#Numerical-parameters-and-time-stepping-parameters-1","page":"Decaying barotropic quasi-geostropic turbulence on a beta-plane","title":"Numerical parameters and time-stepping parameters","text":"","category":"section"},{"location":"generated/barotropicqg_betadecay/#","page":"Decaying barotropic quasi-geostropic turbulence on a beta-plane","title":"Decaying barotropic quasi-geostropic turbulence on a beta-plane","text":"nx = 256       # 2D resolution = nx^2\nstepper = \"FilteredETDRK4\"   # timestepper\ndt = 0.02      # timestep\nnsteps = 8000  # total number of time-steps\nnsubs  = 2000  # number of time-steps for intermediate logging/plotting (nsteps must be multiple of nsubs)\nnothing # hide","category":"page"},{"location":"generated/barotropicqg_betadecay/#Physical-parameters-1","page":"Decaying barotropic quasi-geostropic turbulence on a beta-plane","title":"Physical parameters","text":"","category":"section"},{"location":"generated/barotropicqg_betadecay/#","page":"Decaying barotropic quasi-geostropic turbulence on a beta-plane","title":"Decaying barotropic quasi-geostropic turbulence on a beta-plane","text":"Lx = 2π        # domain size\n ν = 0e-05     # viscosity\nnν = 1         # viscosity order\n β = 15.0      # planetary PV gradient\n μ = 0.0       # bottom drag","category":"page"},{"location":"generated/barotropicqg_betadecay/#Problem-setup-1","page":"Decaying barotropic quasi-geostropic turbulence on a beta-plane","title":"Problem setup","text":"","category":"section"},{"location":"generated/barotropicqg_betadecay/#","page":"Decaying barotropic quasi-geostropic turbulence on a beta-plane","title":"Decaying barotropic quasi-geostropic turbulence on a beta-plane","text":"We initialize a Problem by providing a set of keyword arguments. The stepper keyword defines the time-stepper to be used,","category":"page"},{"location":"generated/barotropicqg_betadecay/#","page":"Decaying barotropic quasi-geostropic turbulence on a beta-plane","title":"Decaying barotropic quasi-geostropic turbulence on a beta-plane","text":"prob = BarotropicQG.Problem(nx=nx, Lx=Lx, β=β, ν=ν, nν=nν, μ=μ, dt=dt, stepper=stepper, dev=dev)\nnothing # hide","category":"page"},{"location":"generated/barotropicqg_betadecay/#","page":"Decaying barotropic quasi-geostropic turbulence on a beta-plane","title":"Decaying barotropic quasi-geostropic turbulence on a beta-plane","text":"and define some shortcuts","category":"page"},{"location":"generated/barotropicqg_betadecay/#","page":"Decaying barotropic quasi-geostropic turbulence on a beta-plane","title":"Decaying barotropic quasi-geostropic turbulence on a beta-plane","text":"sol, cl, v, p, g = prob.sol, prob.clock, prob.vars, prob.params, prob.grid\nx, y = gridpoints(g)\nnothing # hide","category":"page"},{"location":"generated/barotropicqg_betadecay/#Setting-initial-conditions-1","page":"Decaying barotropic quasi-geostropic turbulence on a beta-plane","title":"Setting initial conditions","text":"","category":"section"},{"location":"generated/barotropicqg_betadecay/#","page":"Decaying barotropic quasi-geostropic turbulence on a beta-plane","title":"Decaying barotropic quasi-geostropic turbulence on a beta-plane","text":"Our initial condition consist of a flow that has power only at wavenumbers with 8fracL2pisqrtk_x^2+k_y^210 and initial energy E_0:","category":"page"},{"location":"generated/barotropicqg_betadecay/#","page":"Decaying barotropic quasi-geostropic turbulence on a beta-plane","title":"Decaying barotropic quasi-geostropic turbulence on a beta-plane","text":"Random.seed!(1234)\nE0 = 0.1\nmodk = ones(g.nkr, g.nl)\nmodk[real.(g.Krsq).<(8*2*pi/g.Lx)^2] .= 0\nmodk[real.(g.Krsq).>(10*2*pi/g.Lx)^2] .= 0\nmodk[1, :] .= 0\npsih = (randn(Float64, size(sol)) .+ im*randn(Float64, size(sol))).*modk\npsih = @. psih*prob.timestepper.filter\nEin = real(sum(g.Krsq.*abs2.(psih)/(g.nx*g.ny)^2))\npsih = psih*sqrt(E0/Ein)\nqi = -irfft(g.Krsq.*psih, g.nx)\nE0 = FourierFlows.parsevalsum(g.Krsq.*abs2.(psih), g)\n\nBarotropicQG.set_zeta!(prob, qi)\nnothing #hide","category":"page"},{"location":"generated/barotropicqg_betadecay/#Diagnostics-1","page":"Decaying barotropic quasi-geostropic turbulence on a beta-plane","title":"Diagnostics","text":"","category":"section"},{"location":"generated/barotropicqg_betadecay/#","page":"Decaying barotropic quasi-geostropic turbulence on a beta-plane","title":"Decaying barotropic quasi-geostropic turbulence on a beta-plane","text":"Create Diagnostics – energy and enstrophy functions are imported at the top.","category":"page"},{"location":"generated/barotropicqg_betadecay/#","page":"Decaying barotropic quasi-geostropic turbulence on a beta-plane","title":"Decaying barotropic quasi-geostropic turbulence on a beta-plane","text":"E = Diagnostic(energy, prob; nsteps=nsteps)\nZ = Diagnostic(enstrophy, prob; nsteps=nsteps)\ndiags = [E, Z] # A list of Diagnostics types passed to \"stepforward!\" will  be updated every timestep.\nnothing # hide","category":"page"},{"location":"generated/barotropicqg_betadecay/#Output-1","page":"Decaying barotropic quasi-geostropic turbulence on a beta-plane","title":"Output","text":"","category":"section"},{"location":"generated/barotropicqg_betadecay/#","page":"Decaying barotropic quasi-geostropic turbulence on a beta-plane","title":"Decaying barotropic quasi-geostropic turbulence on a beta-plane","text":"We choose folder for outputing .jld2 files and snapshots (.png files).","category":"page"},{"location":"generated/barotropicqg_betadecay/#","page":"Decaying barotropic quasi-geostropic turbulence on a beta-plane","title":"Decaying barotropic quasi-geostropic turbulence on a beta-plane","text":"filepath = \".\"\nplotpath = \"./plots_decayingbetaturb\"\nplotname = \"snapshots\"\nfilename = joinpath(filepath, \"decayingbetaturb.jld2\")\nnothing # hide","category":"page"},{"location":"generated/barotropicqg_betadecay/#","page":"Decaying barotropic quasi-geostropic turbulence on a beta-plane","title":"Decaying barotropic quasi-geostropic turbulence on a beta-plane","text":"Do some basic file management","category":"page"},{"location":"generated/barotropicqg_betadecay/#","page":"Decaying barotropic quasi-geostropic turbulence on a beta-plane","title":"Decaying barotropic quasi-geostropic turbulence on a beta-plane","text":"if isfile(filename); rm(filename); end\nif !isdir(plotpath); mkdir(plotpath); end\nnothing # hide","category":"page"},{"location":"generated/barotropicqg_betadecay/#","page":"Decaying barotropic quasi-geostropic turbulence on a beta-plane","title":"Decaying barotropic quasi-geostropic turbulence on a beta-plane","text":"And then create Output","category":"page"},{"location":"generated/barotropicqg_betadecay/#","page":"Decaying barotropic quasi-geostropic turbulence on a beta-plane","title":"Decaying barotropic quasi-geostropic turbulence on a beta-plane","text":"get_sol(prob) = sol # extracts the Fourier-transformed solution\nget_u(prob) = irfft(im*g.l.*g.invKrsq.*sol, g.nx)\nout = Output(prob, filename, (:sol, get_sol), (:u, get_u))\nnothing # hide","category":"page"},{"location":"generated/barotropicqg_betadecay/#Visualizing-the-simulation-1","page":"Decaying barotropic quasi-geostropic turbulence on a beta-plane","title":"Visualizing the simulation","text":"","category":"section"},{"location":"generated/barotropicqg_betadecay/#","page":"Decaying barotropic quasi-geostropic turbulence on a beta-plane","title":"Decaying barotropic quasi-geostropic turbulence on a beta-plane","text":"We define a function that plots the vorticity and streamfunction fields and their corresponding zonal mean structure.","category":"page"},{"location":"generated/barotropicqg_betadecay/#","page":"Decaying barotropic quasi-geostropic turbulence on a beta-plane","title":"Decaying barotropic quasi-geostropic turbulence on a beta-plane","text":"function plot_output(prob, fig, axs; drawcolorbar=false)\n  sol, v, p, g = prob.sol, prob.vars, prob.params, prob.grid\n  BarotropicQG.updatevars!(prob)\n\n  sca(axs[1])\n  cla()\n  pcolormesh(x, y, v.q)\n  axis(\"square\")\n  xticks(-2:2:2)\n  yticks(-2:2:2)\n  title(L\"vorticity $\\zeta = \\partial_x v - \\partial_y u$\")\n  if drawcolorbar==true\n    colorbar()\n  end\n\n  sca(axs[2])\n  cla()\n  contourf(x, y, v.psi)\n  if maximum(abs.(v.psi))>0\n    contour(x, y, v.psi, colors=\"k\")\n  end\n  axis(\"square\")\n  xticks(-2:2:2)\n  yticks(-2:2:2)\n  title(L\"streamfunction $\\psi$\")\n  if drawcolorbar==true\n    colorbar()\n  end\n\n  sca(axs[3])\n  cla()\n  plot(Array(transpose(mean(v.zeta, dims=1))), y[1,:])\n  plot(0*y[1,:], y[1,:], \"k--\")\n  ylim(-Lx/2, Lx/2)\n  xlim(-2, 2)\n  title(L\"zonal mean $\\zeta$\")\n\n  sca(axs[4])\n  cla()\n  plot(Array(transpose(mean(v.u, dims=1))), y[1,:])\n  plot(0*y[1,:], y[1,:], \"k--\")\n  ylim(-Lx/2, Lx/2)\n  xlim(-0.5, 0.5)\n  title(L\"zonal mean $u$\")\nend\nnothing # hide","category":"page"},{"location":"generated/barotropicqg_betadecay/#Time-stepping-the-Problem-forward-1","page":"Decaying barotropic quasi-geostropic turbulence on a beta-plane","title":"Time-stepping the Problem forward","text":"","category":"section"},{"location":"generated/barotropicqg_betadecay/#","page":"Decaying barotropic quasi-geostropic turbulence on a beta-plane","title":"Decaying barotropic quasi-geostropic turbulence on a beta-plane","text":"We time-step the Problem forward in time.","category":"page"},{"location":"generated/barotropicqg_betadecay/#","page":"Decaying barotropic quasi-geostropic turbulence on a beta-plane","title":"Decaying barotropic quasi-geostropic turbulence on a beta-plane","text":"startwalltime = time()\n\nwhile cl.step < nsteps\n  stepforward!(prob, diags, nsubs)\n\n  log = @sprintf(\"step: %04d, t: %d, E: %.4f, Q: %.4f, walltime: %.2f min\",\n    cl.step, cl.t, E.data[E.i], Z.data[Z.i], (time()-startwalltime)/60)\n\n  println(log)\nend\nprintln(\"finished\")","category":"page"},{"location":"generated/barotropicqg_betadecay/#Plot-1","page":"Decaying barotropic quasi-geostropic turbulence on a beta-plane","title":"Plot","text":"","category":"section"},{"location":"generated/barotropicqg_betadecay/#","page":"Decaying barotropic quasi-geostropic turbulence on a beta-plane","title":"Decaying barotropic quasi-geostropic turbulence on a beta-plane","text":"Now let's see what we got. We plot the output,","category":"page"},{"location":"generated/barotropicqg_betadecay/#","page":"Decaying barotropic quasi-geostropic turbulence on a beta-plane","title":"Decaying barotropic quasi-geostropic turbulence on a beta-plane","text":"fig, axs = subplots(ncols=2, nrows=2, figsize=(8, 8))\nplot_output(prob, fig, axs; drawcolorbar=false)\ngcf() # hide","category":"page"},{"location":"generated/barotropicqg_betadecay/#","page":"Decaying barotropic quasi-geostropic turbulence on a beta-plane","title":"Decaying barotropic quasi-geostropic turbulence on a beta-plane","text":"and finally save the figure","category":"page"},{"location":"generated/barotropicqg_betadecay/#","page":"Decaying barotropic quasi-geostropic turbulence on a beta-plane","title":"Decaying barotropic quasi-geostropic turbulence on a beta-plane","text":"savename = @sprintf(\"%s_%09d.png\", joinpath(plotpath, plotname), cl.step)\nsavefig(savename)","category":"page"},{"location":"generated/barotropicqg_betadecay/#","page":"Decaying barotropic quasi-geostropic turbulence on a beta-plane","title":"Decaying barotropic quasi-geostropic turbulence on a beta-plane","text":"","category":"page"},{"location":"generated/barotropicqg_betadecay/#","page":"Decaying barotropic quasi-geostropic turbulence on a beta-plane","title":"Decaying barotropic quasi-geostropic turbulence on a beta-plane","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/barotropicqgql_betaforced/#","page":"Quasi-Linear forced-dissipative barotropic quasi-geostropic turbulence on a beta-plane","title":"Quasi-Linear forced-dissipative barotropic quasi-geostropic turbulence on a beta-plane","text":"EditURL = \"https://github.com/FourierFlows/GeophysicalFlows.jl/blob/master/examples/barotropicqgql_betaforced.jl\"","category":"page"},{"location":"generated/barotropicqgql_betaforced/#Quasi-Linear-forced-dissipative-barotropic-quasi-geostropic-turbulence-on-a-beta-plane-1","page":"Quasi-Linear forced-dissipative barotropic quasi-geostropic turbulence on a beta-plane","title":"Quasi-Linear forced-dissipative barotropic quasi-geostropic turbulence on a beta-plane","text":"","category":"section"},{"location":"generated/barotropicqgql_betaforced/#","page":"Quasi-Linear forced-dissipative barotropic quasi-geostropic turbulence on a beta-plane","title":"Quasi-Linear forced-dissipative barotropic quasi-geostropic turbulence on a beta-plane","text":"In this example, we simulate forced-dissipative barotropic quasi-geostrophic turbulence on a beta plane under the \\textit{quasi-linear approximation}. The dynamics include linear drag and stochastic excitation.","category":"page"},{"location":"generated/barotropicqgql_betaforced/#","page":"Quasi-Linear forced-dissipative barotropic quasi-geostropic turbulence on a beta-plane","title":"Quasi-Linear forced-dissipative barotropic quasi-geostropic turbulence on a beta-plane","text":"using FourierFlows, PyPlot, JLD2, Statistics, Printf, Random\n\nimport GeophysicalFlows.BarotropicQGQL\nimport GeophysicalFlows.BarotropicQGQL: energy, enstrophy\n\nimport FFTW: irfft, ifft\nimport Random: seed!\nimport Statistics: mean","category":"page"},{"location":"generated/barotropicqgql_betaforced/#Numerical-parameters-and-time-stepping-parameters-1","page":"Quasi-Linear forced-dissipative barotropic quasi-geostropic turbulence on a beta-plane","title":"Numerical parameters and time-stepping parameters","text":"","category":"section"},{"location":"generated/barotropicqgql_betaforced/#","page":"Quasi-Linear forced-dissipative barotropic quasi-geostropic turbulence on a beta-plane","title":"Quasi-Linear forced-dissipative barotropic quasi-geostropic turbulence on a beta-plane","text":"nx = 128       # 2D resolution = nx^2\nstepper = \"FilteredRK4\"   # timestepper\ndt  = 0.05     # timestep\nnsteps = 8000  # total number of time-steps\nnsubs  = 2000  # number of time-steps for intermediate logging/plotting (nsteps must be multiple of nsubs)\nnothing # hide","category":"page"},{"location":"generated/barotropicqgql_betaforced/#Physical-parameters-1","page":"Quasi-Linear forced-dissipative barotropic quasi-geostropic turbulence on a beta-plane","title":"Physical parameters","text":"","category":"section"},{"location":"generated/barotropicqgql_betaforced/#","page":"Quasi-Linear forced-dissipative barotropic quasi-geostropic turbulence on a beta-plane","title":"Quasi-Linear forced-dissipative barotropic quasi-geostropic turbulence on a beta-plane","text":"Lx = 2π        # domain size\n ν = 0.0       # viscosity\nnν = 1         # viscosity order\n β = 10.0      # planetary PV gradient\n μ = 0.01      # bottom drag\nnothing # hide","category":"page"},{"location":"generated/barotropicqgql_betaforced/#Forcing-1","page":"Quasi-Linear forced-dissipative barotropic quasi-geostropic turbulence on a beta-plane","title":"Forcing","text":"","category":"section"},{"location":"generated/barotropicqgql_betaforced/#","page":"Quasi-Linear forced-dissipative barotropic quasi-geostropic turbulence on a beta-plane","title":"Quasi-Linear forced-dissipative barotropic quasi-geostropic turbulence on a beta-plane","text":"We force the vorticity equation with stochastic excitation that is delta-correlated in time and while spatially homogeneously and isotropically correlated. The forcing has a spectrum with power in a ring in wavenumber space of radious k_f and width delta k_f, and it injects energy per unit area and per unit time equal to varepsilon.","category":"page"},{"location":"generated/barotropicqgql_betaforced/#","page":"Quasi-Linear forced-dissipative barotropic quasi-geostropic turbulence on a beta-plane","title":"Quasi-Linear forced-dissipative barotropic quasi-geostropic turbulence on a beta-plane","text":"kf, dkf = 14.0, 1.5     # forcing wavenumber and width of forcing ring in wavenumber space\nε = 0.001               # energy input rate by the forcing\n\ngr  = TwoDGrid(nx, Lx)\n\nx, y = gridpoints(gr)\nKr = [ gr.kr[i] for i=1:gr.nkr, j=1:gr.nl]\n\nforcingcovariancespectrum = @. exp(-(sqrt(gr.Krsq)-kf)^2/(2*dkf^2))\n@. forcingcovariancespectrum[gr.Krsq < 2.0^2 ] .= 0\n@. forcingcovariancespectrum[gr.Krsq > 20.0^2 ] .= 0\nforcingcovariancespectrum[Kr .< 2π/Lx] .= 0\nε0 = FourierFlows.parsevalsum(forcingcovariancespectrum.*gr.invKrsq/2.0, gr)/(gr.Lx*gr.Ly)\nforcingcovariancespectrum .= ε/ε0 * forcingcovariancespectrum  # normalization so that forcing injects energy ε per domain area per unit time\n\nseed!(1234) # reset of the random number generator for reproducibility\nnothing # hide","category":"page"},{"location":"generated/barotropicqgql_betaforced/#","page":"Quasi-Linear forced-dissipative barotropic quasi-geostropic turbulence on a beta-plane","title":"Quasi-Linear forced-dissipative barotropic quasi-geostropic turbulence on a beta-plane","text":"Next we construct function calcF! that computes a forcing realization every timestep","category":"page"},{"location":"generated/barotropicqgql_betaforced/#","page":"Quasi-Linear forced-dissipative barotropic quasi-geostropic turbulence on a beta-plane","title":"Quasi-Linear forced-dissipative barotropic quasi-geostropic turbulence on a beta-plane","text":"function calcF!(Fh, sol, t, cl, v, p, g)\n  ξ = exp.(2π*im*rand(Float64, size(sol)))/sqrt(cl.dt)\n  ξ[1, 1] = 0\n  @. Fh = ξ*sqrt(forcingcovariancespectrum)\n  Fh[abs.(Kr) .== 0] .= 0\n  nothing\nend\nnothing # hide","category":"page"},{"location":"generated/barotropicqgql_betaforced/#Problem-setup-1","page":"Quasi-Linear forced-dissipative barotropic quasi-geostropic turbulence on a beta-plane","title":"Problem setup","text":"","category":"section"},{"location":"generated/barotropicqgql_betaforced/#","page":"Quasi-Linear forced-dissipative barotropic quasi-geostropic turbulence on a beta-plane","title":"Quasi-Linear forced-dissipative barotropic quasi-geostropic turbulence on a beta-plane","text":"We initialize a Problem by providing a set of keyword arguments. The stepper keyword defines the time-stepper to be used.","category":"page"},{"location":"generated/barotropicqgql_betaforced/#","page":"Quasi-Linear forced-dissipative barotropic quasi-geostropic turbulence on a beta-plane","title":"Quasi-Linear forced-dissipative barotropic quasi-geostropic turbulence on a beta-plane","text":"prob = BarotropicQGQL.Problem(nx=nx, Lx=Lx, beta=β, nu=ν, nnu=nν, mu=μ, dt=dt,\n                              stepper=stepper, calcF=calcF!, stochastic=true)\nnothing # hide","category":"page"},{"location":"generated/barotropicqgql_betaforced/#","page":"Quasi-Linear forced-dissipative barotropic quasi-geostropic turbulence on a beta-plane","title":"Quasi-Linear forced-dissipative barotropic quasi-geostropic turbulence on a beta-plane","text":"and define some shortcuts","category":"page"},{"location":"generated/barotropicqgql_betaforced/#","page":"Quasi-Linear forced-dissipative barotropic quasi-geostropic turbulence on a beta-plane","title":"Quasi-Linear forced-dissipative barotropic quasi-geostropic turbulence on a beta-plane","text":"sol, cl, v, p, g = prob.sol, prob.clock, prob.vars, prob.params, prob.grid\nnothing # hide","category":"page"},{"location":"generated/barotropicqgql_betaforced/#Setting-initial-conditions-1","page":"Quasi-Linear forced-dissipative barotropic quasi-geostropic turbulence on a beta-plane","title":"Setting initial conditions","text":"","category":"section"},{"location":"generated/barotropicqgql_betaforced/#","page":"Quasi-Linear forced-dissipative barotropic quasi-geostropic turbulence on a beta-plane","title":"Quasi-Linear forced-dissipative barotropic quasi-geostropic turbulence on a beta-plane","text":"Our initial condition is simply fluid at rest.","category":"page"},{"location":"generated/barotropicqgql_betaforced/#","page":"Quasi-Linear forced-dissipative barotropic quasi-geostropic turbulence on a beta-plane","title":"Quasi-Linear forced-dissipative barotropic quasi-geostropic turbulence on a beta-plane","text":"BarotropicQGQL.set_zeta!(prob, 0*x)","category":"page"},{"location":"generated/barotropicqgql_betaforced/#Diagnostics-1","page":"Quasi-Linear forced-dissipative barotropic quasi-geostropic turbulence on a beta-plane","title":"Diagnostics","text":"","category":"section"},{"location":"generated/barotropicqgql_betaforced/#","page":"Quasi-Linear forced-dissipative barotropic quasi-geostropic turbulence on a beta-plane","title":"Quasi-Linear forced-dissipative barotropic quasi-geostropic turbulence on a beta-plane","text":"Create Diagnostics – \"energy\" and \"enstrophy\" are functions imported at the top.","category":"page"},{"location":"generated/barotropicqgql_betaforced/#","page":"Quasi-Linear forced-dissipative barotropic quasi-geostropic turbulence on a beta-plane","title":"Quasi-Linear forced-dissipative barotropic quasi-geostropic turbulence on a beta-plane","text":"E = Diagnostic(energy, prob; nsteps=nsteps)\nZ = Diagnostic(enstrophy, prob; nsteps=nsteps)\n\nfunction zetaMean(prob)\n  sol = prob.sol\n  sol[1, :]\nend\n\nzMean = Diagnostic(zetaMean, prob; nsteps=nsteps, freq=10)  # the zonal-mean vorticity\ndiags = [E, Z, zMean] # A list of Diagnostics types passed to \"stepforward!\" will  be updated every timestep.\nnothing # hide","category":"page"},{"location":"generated/barotropicqgql_betaforced/#Output-1","page":"Quasi-Linear forced-dissipative barotropic quasi-geostropic turbulence on a beta-plane","title":"Output","text":"","category":"section"},{"location":"generated/barotropicqgql_betaforced/#","page":"Quasi-Linear forced-dissipative barotropic quasi-geostropic turbulence on a beta-plane","title":"Quasi-Linear forced-dissipative barotropic quasi-geostropic turbulence on a beta-plane","text":"We choose folder for outputing .jld2 files and snapshots (.png files).","category":"page"},{"location":"generated/barotropicqgql_betaforced/#","page":"Quasi-Linear forced-dissipative barotropic quasi-geostropic turbulence on a beta-plane","title":"Quasi-Linear forced-dissipative barotropic quasi-geostropic turbulence on a beta-plane","text":"filepath = \".\"\nplotpath = \"./plots_forcedbetaturb\"\nplotname = \"snapshots\"\nfilename = joinpath(filepath, \"forcedbetaturb.jld2\")\nnothing # hide","category":"page"},{"location":"generated/barotropicqgql_betaforced/#","page":"Quasi-Linear forced-dissipative barotropic quasi-geostropic turbulence on a beta-plane","title":"Quasi-Linear forced-dissipative barotropic quasi-geostropic turbulence on a beta-plane","text":"Do some basic file management","category":"page"},{"location":"generated/barotropicqgql_betaforced/#","page":"Quasi-Linear forced-dissipative barotropic quasi-geostropic turbulence on a beta-plane","title":"Quasi-Linear forced-dissipative barotropic quasi-geostropic turbulence on a beta-plane","text":"if isfile(filename); rm(filename); end\nif !isdir(plotpath); mkdir(plotpath); end\nnothing # hide","category":"page"},{"location":"generated/barotropicqgql_betaforced/#","page":"Quasi-Linear forced-dissipative barotropic quasi-geostropic turbulence on a beta-plane","title":"Quasi-Linear forced-dissipative barotropic quasi-geostropic turbulence on a beta-plane","text":"And then create Output","category":"page"},{"location":"generated/barotropicqgql_betaforced/#","page":"Quasi-Linear forced-dissipative barotropic quasi-geostropic turbulence on a beta-plane","title":"Quasi-Linear forced-dissipative barotropic quasi-geostropic turbulence on a beta-plane","text":"get_sol(prob) = sol # extracts the Fourier-transformed solution\nget_u(prob) = irfft(im*g.l.*g.invKrsq.*sol, g.nx)\nout = Output(prob, filename, (:sol, get_sol), (:u, get_u))\nnothing # hide","category":"page"},{"location":"generated/barotropicqgql_betaforced/#Visualizing-the-simulation-1","page":"Quasi-Linear forced-dissipative barotropic quasi-geostropic turbulence on a beta-plane","title":"Visualizing the simulation","text":"","category":"section"},{"location":"generated/barotropicqgql_betaforced/#","page":"Quasi-Linear forced-dissipative barotropic quasi-geostropic turbulence on a beta-plane","title":"Quasi-Linear forced-dissipative barotropic quasi-geostropic turbulence on a beta-plane","text":"We define a function that plots the vorticity and streamfunction fields, the corresponding zonal-mean vorticity and zonal-mean zonal velocity and timeseries of energy and enstrophy.","category":"page"},{"location":"generated/barotropicqgql_betaforced/#","page":"Quasi-Linear forced-dissipative barotropic quasi-geostropic turbulence on a beta-plane","title":"Quasi-Linear forced-dissipative barotropic quasi-geostropic turbulence on a beta-plane","text":"function plot_output(prob, fig, axs; drawcolorbar=false)\n  sol, v, p, g = prob.sol, prob.vars, prob.params, prob.grid\n  BarotropicQGQL.updatevars!(prob)\n\n  sca(axs[1])\n  cla()\n  pcolormesh(x, y, v.zeta .+ v.Zeta)\n  axis(\"square\")\n  xticks(-3:1:3)\n  yticks(-3:1:3)\n  title(L\"vorticity $\\zeta = \\partial_x v - \\partial_y u$\")\n  if drawcolorbar==true\n    colorbar()\n  end\n\n  sca(axs[2])\n  cla()\n  contourf(x, y, v.psi)\n  if maximum(abs.(v.psi))>0\n    contour(x, y, v.psi, colors=\"k\")\n  end\n  axis(\"square\")\n  xticks(-3:1:3)\n  yticks(-3:1:3)\n  title(L\"streamfunction $\\psi$\")\n  if drawcolorbar==true\n    colorbar()\n  end\n\n  sca(axs[3])\n  cla()\n  plot(Array(transpose(mean(v.Zeta, dims=1))), y[1, :])\n  plot(0*y[1, :], y[1, :], \"k--\")\n  yticks(-3:1:3)\n  ylim(-Lx/2, Lx/2)\n  xlim(-4, 4)\n  title(L\"zonal mean $\\zeta$\")\n\n  sca(axs[4])\n  cla()\n  plot(Array(mean(transpose(v.U), dims=2)), y[1, :])\n  plot(0*y[1, :], y[1, :], \"k--\")\n  yticks(-3:1:3)\n  ylim(-Lx/2, Lx/2)\n  xlim(-0.7, 0.7)\n  title(L\"zonal mean $u$\")\n\n  sca(axs[5])\n  cla()\n  plot(μ*E.t[1:E.i], E.data[1:E.i], label=\"energy\")\n  xlabel(L\"\\mu t\")\n  legend()\n\n  sca(axs[6])\n  cla()\n  plot(μ*Z.t[1:Z.i], Z.data[1:E.i], label=\"enstrophy\")\n  xlabel(L\"\\mu t\")\n  legend()\nend\nnothing # hide","category":"page"},{"location":"generated/barotropicqgql_betaforced/#Time-stepping-the-Problem-forward-1","page":"Quasi-Linear forced-dissipative barotropic quasi-geostropic turbulence on a beta-plane","title":"Time-stepping the Problem forward","text":"","category":"section"},{"location":"generated/barotropicqgql_betaforced/#","page":"Quasi-Linear forced-dissipative barotropic quasi-geostropic turbulence on a beta-plane","title":"Quasi-Linear forced-dissipative barotropic quasi-geostropic turbulence on a beta-plane","text":"We time-step the Problem forward in time.","category":"page"},{"location":"generated/barotropicqgql_betaforced/#","page":"Quasi-Linear forced-dissipative barotropic quasi-geostropic turbulence on a beta-plane","title":"Quasi-Linear forced-dissipative barotropic quasi-geostropic turbulence on a beta-plane","text":"startwalltime = time()\n\n\nwhile cl.step < nsteps\n  stepforward!(prob, diags, nsubs)\n\n  BarotropicQGQL.updatevars!(prob)\n\n  cfl = cl.dt*maximum([maximum(v.v)/g.dy, maximum(v.u+v.U)/g.dx])\n  log = @sprintf(\"step: %04d, t: %d, cfl: %.2f, E: %.4f, Q: %.4f, walltime: %.2f min\",\n    cl.step, cl.t, cfl, E.data[E.i], Z.data[Z.i],\n    (time()-startwalltime)/60)\n\n  println(log)\nend\nprintln(\"finished\")","category":"page"},{"location":"generated/barotropicqgql_betaforced/#Plot-1","page":"Quasi-Linear forced-dissipative barotropic quasi-geostropic turbulence on a beta-plane","title":"Plot","text":"","category":"section"},{"location":"generated/barotropicqgql_betaforced/#","page":"Quasi-Linear forced-dissipative barotropic quasi-geostropic turbulence on a beta-plane","title":"Quasi-Linear forced-dissipative barotropic quasi-geostropic turbulence on a beta-plane","text":"Now let's see what we got. We plot the output,","category":"page"},{"location":"generated/barotropicqgql_betaforced/#","page":"Quasi-Linear forced-dissipative barotropic quasi-geostropic turbulence on a beta-plane","title":"Quasi-Linear forced-dissipative barotropic quasi-geostropic turbulence on a beta-plane","text":"fig, axs = subplots(ncols=3, nrows=2, figsize=(14, 8))\nplot_output(prob, fig, axs; drawcolorbar=false)\ngcf() #hide","category":"page"},{"location":"generated/barotropicqgql_betaforced/#","page":"Quasi-Linear forced-dissipative barotropic quasi-geostropic turbulence on a beta-plane","title":"Quasi-Linear forced-dissipative barotropic quasi-geostropic turbulence on a beta-plane","text":"and save the figure","category":"page"},{"location":"generated/barotropicqgql_betaforced/#","page":"Quasi-Linear forced-dissipative barotropic quasi-geostropic turbulence on a beta-plane","title":"Quasi-Linear forced-dissipative barotropic quasi-geostropic turbulence on a beta-plane","text":"savename = @sprintf(\"%s_%09d.png\", joinpath(plotpath, plotname), cl.step)\nsavefig(savename)\nnothing #hide","category":"page"},{"location":"generated/barotropicqgql_betaforced/#","page":"Quasi-Linear forced-dissipative barotropic quasi-geostropic turbulence on a beta-plane","title":"Quasi-Linear forced-dissipative barotropic quasi-geostropic turbulence on a beta-plane","text":"We can also plot a Hovmoller plot of the zonal flow","category":"page"},{"location":"generated/barotropicqgql_betaforced/#","page":"Quasi-Linear forced-dissipative barotropic quasi-geostropic turbulence on a beta-plane","title":"Quasi-Linear forced-dissipative barotropic quasi-geostropic turbulence on a beta-plane","text":"UM = zeros(g.ny, length(zMean.t))\nfor j in 1:length(zMean.t)\n    UM[:, j] = real(ifft(im*g.l'.*zMean[j].*g.invKrsq[1, :]))\nend\nfigure(2); pcolormesh(zMean.t, y[1, :], UM)\nxlabel(L\"time $t$\")\nylabel(L\"zonal mean $u$\")\n\ngcf() #hide","category":"page"},{"location":"generated/barotropicqgql_betaforced/#","page":"Quasi-Linear forced-dissipative barotropic quasi-geostropic turbulence on a beta-plane","title":"Quasi-Linear forced-dissipative barotropic quasi-geostropic turbulence on a beta-plane","text":"","category":"page"},{"location":"generated/barotropicqgql_betaforced/#","page":"Quasi-Linear forced-dissipative barotropic quasi-geostropic turbulence on a beta-plane","title":"Quasi-Linear forced-dissipative barotropic quasi-geostropic turbulence on a beta-plane","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/multilayerqg_2layer/#","page":"Phillips model of Baroclinic Instability","title":"Phillips model of Baroclinic Instability","text":"EditURL = \"https://github.com/FourierFlows/GeophysicalFlows.jl/blob/master/examples/multilayerqg_2layer.jl\"","category":"page"},{"location":"generated/multilayerqg_2layer/#Phillips-model-of-Baroclinic-Instability-1","page":"Phillips model of Baroclinic Instability","title":"Phillips model of Baroclinic Instability","text":"","category":"section"},{"location":"generated/multilayerqg_2layer/#","page":"Phillips model of Baroclinic Instability","title":"Phillips model of Baroclinic Instability","text":"Here, we simulate the growth of barolinic instability in the Phillips model when we impose a vertical mean flow shear as a difference Delta U in the imposed, domain-averaged, zonal flow at each layer.","category":"page"},{"location":"generated/multilayerqg_2layer/#","page":"Phillips model of Baroclinic Instability","title":"Phillips model of Baroclinic Instability","text":"using FourierFlows, PyPlot, JLD2, Printf\n\nusing FFTW: ifft\n\nimport GeophysicalFlows.MultilayerQG\nimport GeophysicalFlows.MultilayerQG: energies, fluxes","category":"page"},{"location":"generated/multilayerqg_2layer/#Numerical-parameters-and-time-stepping-parameters-1","page":"Phillips model of Baroclinic Instability","title":"Numerical parameters and time-stepping parameters","text":"","category":"section"},{"location":"generated/multilayerqg_2layer/#","page":"Phillips model of Baroclinic Instability","title":"Phillips model of Baroclinic Instability","text":"nx = 128          # 2D resolution = nx^2\nny = nx\n\nstepper = \"FilteredAB3\"   # timestepper\ndt  = 2e-3      # timestep\nnsteps = 16000  # total number of time-steps\nnsubs  = 4000   # number of time-steps for plotting (nsteps must be multiple of nsubs)\nnothing # hide","category":"page"},{"location":"generated/multilayerqg_2layer/#Physical-parameters-1","page":"Phillips model of Baroclinic Instability","title":"Physical parameters","text":"","category":"section"},{"location":"generated/multilayerqg_2layer/#","page":"Phillips model of Baroclinic Instability","title":"Phillips model of Baroclinic Instability","text":"Lx = 2π         # domain size\n μ = 5e-2       # bottom drag\n β = 5          # the y-gradient of planetary PV\n\nnlayers = 2     # number of layers\nf0, g = 1, 1    # Coriolis parameter and gravitational constant\n H = [0.2, 0.8] # the rest depths of each layer\n ρ = [4.0, 5.0] # the density of each layer\n\n U = zeros(nlayers) # the imposed mean zonal flow in each layer\n U[1] = 1.0\n U[2] = 0.0\n nothing # hide","category":"page"},{"location":"generated/multilayerqg_2layer/#Problem-setup-1","page":"Phillips model of Baroclinic Instability","title":"Problem setup","text":"","category":"section"},{"location":"generated/multilayerqg_2layer/#","page":"Phillips model of Baroclinic Instability","title":"Phillips model of Baroclinic Instability","text":"We initialize a Problem by providing a set of keyword arguments. The stepper keyword defines the time-stepper to be used.","category":"page"},{"location":"generated/multilayerqg_2layer/#","page":"Phillips model of Baroclinic Instability","title":"Phillips model of Baroclinic Instability","text":"prob = MultilayerQG.Problem(nlayers=nlayers, nx=nx, Lx=Lx, f0=f0, g=g, H=H, ρ=ρ, U=U, dt=dt, stepper=stepper, μ=μ, β=β)\nnothing # hide","category":"page"},{"location":"generated/multilayerqg_2layer/#","page":"Phillips model of Baroclinic Instability","title":"Phillips model of Baroclinic Instability","text":"and define some shortcuts","category":"page"},{"location":"generated/multilayerqg_2layer/#","page":"Phillips model of Baroclinic Instability","title":"Phillips model of Baroclinic Instability","text":"sol, cl, pr, vs, gr = prob.sol, prob.clock, prob.params, prob.vars, prob.grid\nx, y = gridpoints(gr)\nnothing # hide","category":"page"},{"location":"generated/multilayerqg_2layer/#Setting-initial-conditions-1","page":"Phillips model of Baroclinic Instability","title":"Setting initial conditions","text":"","category":"section"},{"location":"generated/multilayerqg_2layer/#","page":"Phillips model of Baroclinic Instability","title":"Phillips model of Baroclinic Instability","text":"Our initial condition is some small amplitude random flow.","category":"page"},{"location":"generated/multilayerqg_2layer/#","page":"Phillips model of Baroclinic Instability","title":"Phillips model of Baroclinic Instability","text":"MultilayerQG.set_q!(prob, 1e-2randn((nx, ny, nlayers)))\nnothing # hide","category":"page"},{"location":"generated/multilayerqg_2layer/#Diagnostics-1","page":"Phillips model of Baroclinic Instability","title":"Diagnostics","text":"","category":"section"},{"location":"generated/multilayerqg_2layer/#","page":"Phillips model of Baroclinic Instability","title":"Phillips model of Baroclinic Instability","text":"Create Diagnostics – energy function is imported at the top.","category":"page"},{"location":"generated/multilayerqg_2layer/#","page":"Phillips model of Baroclinic Instability","title":"Phillips model of Baroclinic Instability","text":"E = Diagnostic(energies, prob; nsteps=nsteps)\ndiags = [E] # A list of Diagnostics types passed to \"stepforward!\" will  be updated every timestep.\nnothing # hide","category":"page"},{"location":"generated/multilayerqg_2layer/#Output-1","page":"Phillips model of Baroclinic Instability","title":"Output","text":"","category":"section"},{"location":"generated/multilayerqg_2layer/#","page":"Phillips model of Baroclinic Instability","title":"Phillips model of Baroclinic Instability","text":"We choose folder for outputing .jld2 files and snapshots (.png files).","category":"page"},{"location":"generated/multilayerqg_2layer/#","page":"Phillips model of Baroclinic Instability","title":"Phillips model of Baroclinic Instability","text":"filepath = \".\"\nplotpath = \"./plots_2layer\"\nplotname = \"snapshots\"\nfilename = joinpath(filepath, \"2layer.jld2\")\nnothing # hide","category":"page"},{"location":"generated/multilayerqg_2layer/#","page":"Phillips model of Baroclinic Instability","title":"Phillips model of Baroclinic Instability","text":"Do some basic file management","category":"page"},{"location":"generated/multilayerqg_2layer/#","page":"Phillips model of Baroclinic Instability","title":"Phillips model of Baroclinic Instability","text":"if isfile(filename); rm(filename); end\nif !isdir(plotpath); mkdir(plotpath); end\nnothing # hide","category":"page"},{"location":"generated/multilayerqg_2layer/#","page":"Phillips model of Baroclinic Instability","title":"Phillips model of Baroclinic Instability","text":"And then create Output","category":"page"},{"location":"generated/multilayerqg_2layer/#","page":"Phillips model of Baroclinic Instability","title":"Phillips model of Baroclinic Instability","text":"get_sol(prob) = sol # extracts the Fourier-transformed solution\nfunction get_u(prob)\n  @. v.qh = sol\n  streamfunctionfrompv!(v.psih, v.qh, p.invS, g)\n  @. v.uh = -im*g.l *v.psih\n  invtransform!(v.u, v.uh, p)\n  v.u\nend\nout = Output(prob, filename, (:sol, get_sol), (:u, get_u))\nnothing #hide","category":"page"},{"location":"generated/multilayerqg_2layer/#Visualizing-the-simulation-1","page":"Phillips model of Baroclinic Instability","title":"Visualizing the simulation","text":"","category":"section"},{"location":"generated/multilayerqg_2layer/#","page":"Phillips model of Baroclinic Instability","title":"Phillips model of Baroclinic Instability","text":"We define a function that plots the potential vorticity field and the evolution of energy and enstrophy.","category":"page"},{"location":"generated/multilayerqg_2layer/#","page":"Phillips model of Baroclinic Instability","title":"Phillips model of Baroclinic Instability","text":"function plot_output(prob, fig, axs; drawcolorbar=false)\n\n  sol, v, p, g = prob.sol, prob.vars, prob.params, prob.grid\n  MultilayerQG.updatevars!(prob)\n\n  for j in 1:nlayers\n    sca(axs[j])\n    pcolormesh(x, y, v.q[:, :, j])\n    axis(\"square\")\n    xlim(-Lx/2, Lx/2)\n    ylim(-Lx/2, Lx/2)\n    xticks([-2, 0, 2])\n    yticks([-2, 0, 2])\n    title(L\"$q_\"*string(j)*L\"$\")\n    if drawcolorbar==true\n      colorbar()\n    end\n\n    sca(axs[j+2])\n    cla()\n    contourf(x, y, v.psi[:, :, j])\n    contour(x, y, v.psi[:, :, j], colors=\"k\")\n    axis(\"square\")\n    xlim(-Lx/2, Lx/2)\n    ylim(-Lx/2, Lx/2)\n    xticks([-2, 0, 2])\n    yticks([-2, 0, 2])\n    title(L\"$\\psi_\"*string(j)*L\"$\")\n    if drawcolorbar==true\n      colorbar()\n    end\n  end\n\n  sca(axs[5])\n  cla()\n  semilogy(μ*[E.t[i] for i=1:E.i], [E.data[i][1][1] for i=1:E.i], color=\"b\", label=L\"$KE_1$\")\n  plot(μ*[E.t[i] for i=1:E.i], [E.data[i][1][2] for i=1:E.i], color=\"r\", label=L\"$KE_2$\")\n  xlabel(L\"\\mu t\")\n  legend()\n\n  sca(axs[6])\n  cla()\n  semilogy(μ*[E.t[i] for i=1:E.i], [E.data[i][2][1] for i=1:E.i], color=\"k\", label=L\"$PE_{3/2}$\")\n  xlabel(L\"\\mu t\")\n  legend()\nend\nnothing # hide","category":"page"},{"location":"generated/multilayerqg_2layer/#Time-stepping-the-Problem-forward-1","page":"Phillips model of Baroclinic Instability","title":"Time-stepping the Problem forward","text":"","category":"section"},{"location":"generated/multilayerqg_2layer/#","page":"Phillips model of Baroclinic Instability","title":"Phillips model of Baroclinic Instability","text":"Finally, we time-step the Problem forward in time.","category":"page"},{"location":"generated/multilayerqg_2layer/#","page":"Phillips model of Baroclinic Instability","title":"Phillips model of Baroclinic Instability","text":"startwalltime = time()\n\nwhile cl.step < nsteps\n  stepforward!(prob, diags, nsubs)\n\n  log = @sprintf(\"step: %04d, t: %d, KE1: %.4f, KE2: %.4f, PE: %.4f, walltime: %.2f min\", cl.step, cl.t, E.data[E.i][1][1], E.data[E.i][1][2], E.data[E.i][2][1], (time()-startwalltime)/60)\n\n  println(log)\nend\nprintln(\"finished\")","category":"page"},{"location":"generated/multilayerqg_2layer/#Plot-1","page":"Phillips model of Baroclinic Instability","title":"Plot","text":"","category":"section"},{"location":"generated/multilayerqg_2layer/#","page":"Phillips model of Baroclinic Instability","title":"Phillips model of Baroclinic Instability","text":"Now let's see what we got. We plot the output,","category":"page"},{"location":"generated/multilayerqg_2layer/#","page":"Phillips model of Baroclinic Instability","title":"Phillips model of Baroclinic Instability","text":"fig, axs = subplots(ncols=3, nrows=2, figsize=(15, 8))\nplot_output(prob, fig, axs; drawcolorbar=false)\ngcf() #hide","category":"page"},{"location":"generated/multilayerqg_2layer/#","page":"Phillips model of Baroclinic Instability","title":"Phillips model of Baroclinic Instability","text":"and finally save the figure","category":"page"},{"location":"generated/multilayerqg_2layer/#","page":"Phillips model of Baroclinic Instability","title":"Phillips model of Baroclinic Instability","text":"savename = @sprintf(\"%s_%09d.png\", joinpath(plotpath, plotname), cl.step)\nsavefig(savename, dpi=240)","category":"page"},{"location":"generated/multilayerqg_2layer/#","page":"Phillips model of Baroclinic Instability","title":"Phillips model of Baroclinic Instability","text":"","category":"page"},{"location":"generated/multilayerqg_2layer/#","page":"Phillips model of Baroclinic Instability","title":"Phillips model of Baroclinic Instability","text":"This page was generated using Literate.jl.","category":"page"},{"location":"modules/barotropicqg/#BarotropicQG-Module-1","page":"BarotropicQG Module","title":"BarotropicQG Module","text":"","category":"section"},{"location":"modules/barotropicqg/#Basic-Equations-1","page":"BarotropicQG Module","title":"Basic Equations","text":"","category":"section"},{"location":"modules/barotropicqg/#","page":"BarotropicQG Module","title":"BarotropicQG Module","text":"This module solves the quasi-geostrophic barotropic vorticity equation on a beta-plane of variable fluid depth H-h(xy). The flow is obtained through a streamfunction psi as (u upsilon) = (-partial_ypsi partial_xpsi). All flow fields can be obtained from the quasi-geostrophic potential vorticity (QGPV). Here the QGPV is","category":"page"},{"location":"modules/barotropicqg/#","page":"BarotropicQG Module","title":"BarotropicQG Module","text":"underbracef_0 + beta y_textplanetary PV + underbrace(partial_x upsilon\n\t- partial_y u)_textrelative vorticity +\n\tunderbracefracf_0 hH_texttopographic PV","category":"page"},{"location":"modules/barotropicqg/#","page":"BarotropicQG Module","title":"BarotropicQG Module","text":"The dynamical variable is the component of the vorticity of the flow normal to the plane of motion, zetaequiv partial_x upsilon- partial_y u = nabla^2psi. Also, we denote the topographic PV with etaequiv f_0 hH. Thus, the equation solved by the module is:","category":"page"},{"location":"modules/barotropicqg/#","page":"BarotropicQG Module","title":"BarotropicQG Module","text":"partial_t zeta + mathsfJ(psi underbracezeta + eta_equiv q) +\nbetapartial_xpsi = underbrace-leftmu + nu(-1)^n_nu nabla^2n_nu\nright zeta _textrmdissipation + f ","category":"page"},{"location":"modules/barotropicqg/#","page":"BarotropicQG Module","title":"BarotropicQG Module","text":"where mathsfJ(a b) = (partial_x a)(partial_y b)-(partial_y a)(partial_x b). On the right hand side, f(xyt) is forcing, mu is linear drag, and nu is hyperviscosity. Plain old viscosity corresponds to n_nu=1. The sum of relative vorticity and topographic PV is denoted with qequivzeta+eta.","category":"page"},{"location":"modules/barotropicqg/#Implementation-1","page":"BarotropicQG Module","title":"Implementation","text":"","category":"section"},{"location":"modules/barotropicqg/#","page":"BarotropicQG Module","title":"BarotropicQG Module","text":"The equation is time-stepped forward in Fourier space:","category":"page"},{"location":"modules/barotropicqg/#","page":"BarotropicQG Module","title":"BarotropicQG Module","text":"partial_t widehatzeta = - widehatmathsfJ(psi q) +betafracmathrmik_xk^2widehatzeta -left(mu\n+nu k^2n_nuright) widehatzeta  + widehatf ","category":"page"},{"location":"modules/barotropicqg/#","page":"BarotropicQG Module","title":"BarotropicQG Module","text":"In doing so the Jacobian is computed in the conservative form: mathsfJ(fg) = partial_y  (partial_x f) g -partial_x (partial_y f) g.","category":"page"},{"location":"modules/barotropicqg/#","page":"BarotropicQG Module","title":"BarotropicQG Module","text":"Thus:","category":"page"},{"location":"modules/barotropicqg/#","page":"BarotropicQG Module","title":"BarotropicQG Module","text":"mathcalL = betafracmathrmik_xk^2 - mu - nu k^2n_nu ","category":"page"},{"location":"modules/barotropicqg/#","page":"BarotropicQG Module","title":"BarotropicQG Module","text":"mathcalN(widehatzeta) = - mathrmik_x mathrmFFT(u q)-\n\tmathrmik_y mathrmFFT(upsilon q) ","category":"page"},{"location":"modules/barotropicqg/#Examples-1","page":"BarotropicQG Module","title":"Examples","text":"","category":"section"},{"location":"modules/barotropicqg/#","page":"BarotropicQG Module","title":"BarotropicQG Module","text":"examples/barotropicqg_betadecay.jl: A script that simulates decaying quasi-geostrophic flow on a beta-plane demonstrating zonation.\nexamples/barotropicqg_betaforced.jl: A script that simulates forced-dissipative quasi-geostrophic flow on a beta-plane demonstrating zonation. The forcing is temporally delta-correlated and its spatial structure is isotropic with power in a narrow annulus of total radius kf in wavenumber space.\nexamples/barotropicqg_acc.jl: A script that simulates barotropic quasi-geostrophic flow above topography reproducing the results of the paper by\nConstantinou, N. C. (2018). A barotropic model of eddy saturation. J. Phys. Oceanogr., 48 (2), 397-411.","category":"page"},{"location":"modules/barotropicqgql/#BarotropicQGQL-Module-1","page":"BarotropicQGQL Module","title":"BarotropicQGQL Module","text":"","category":"section"},{"location":"modules/barotropicqgql/#Basic-Equations-1","page":"BarotropicQGQL Module","title":"Basic Equations","text":"","category":"section"},{"location":"modules/barotropicqgql/#","page":"BarotropicQGQL Module","title":"BarotropicQGQL Module","text":"This module solves the quasi-linear quasi-geostrophic barotropic vorticity equation on a beta-plane of variable fluid depth H-h(xy).  Quasi-linear refers to the dynamics that neglect the eddy–eddy interactions in the eddy evolution equation after an eddy–mean flow decomposition, e.g., ","category":"page"},{"location":"modules/barotropicqgql/#","page":"BarotropicQGQL Module","title":"BarotropicQGQL Module","text":"phi(x y t) = overlinephi(y t) + phi(xyt) ","category":"page"},{"location":"modules/barotropicqgql/#","page":"BarotropicQGQL Module","title":"BarotropicQGQL Module","text":"where overline above denotes a zonal mean, overlinephi(y t) = int phi(x y t)mathrmdxL_x, and prime denotes deviations from the zonal mean. This approximation is used in many process-model studies of zonation, e.g., ","category":"page"},{"location":"modules/barotropicqgql/#","page":"BarotropicQGQL Module","title":"BarotropicQGQL Module","text":"Farrell, B. F. and Ioannou, P. J. (2003). Structural stability of turbulent jets. J. Atmos. Sci., 60, 2101-2118.\nSrinivasan, K. and Young, W. R. (2012). Zonostrophic instability. J. Atmos. Sci., 69 (5), 1633-1656.\nConstantinou, N. C., Farrell, B. F., and Ioannou, P. J. (2014). Emergence and equilibration of jets in beta-plane turbulence: applications of Stochastic Structural Stability Theory. J. Atmos. Sci., 71 (5), 1818-1842.","category":"page"},{"location":"modules/barotropicqgql/#","page":"BarotropicQGQL Module","title":"BarotropicQGQL Module","text":"As in the BarotropicQG module, the flow is obtained through a streamfunction psi as (u upsilon) = (-partial_ypsi partial_xpsi). All flow fields can be obtained from the quasi-geostrophic potential vorticity (QGPV). Here the QGPV is","category":"page"},{"location":"modules/barotropicqgql/#","page":"BarotropicQGQL Module","title":"BarotropicQGQL Module","text":"underbracef_0 + beta y_textplanetary PV + underbrace(partial_x upsilon\n\t- partial_y u)_textrelative vorticity +\n\tunderbracefracf_0 hH_texttopographic PV","category":"page"},{"location":"modules/barotropicqgql/#","page":"BarotropicQGQL Module","title":"BarotropicQGQL Module","text":"The dynamical variable is the component of the vorticity of the flow normal to the plane of motion, zetaequiv partial_x upsilon- partial_y u = nabla^2psi. Also, we denote the topographic PV with etaequiv f_0 hH. After we apply the eddy-mean flow decomposition above, the QGPV dynamics are:","category":"page"},{"location":"modules/barotropicqgql/#","page":"BarotropicQGQL Module","title":"BarotropicQGQL Module","text":"partial_t overlinezeta + mathsfJ(overlinepsi underbraceoverlinezeta + overlineeta_equiv overlineq) + overlinemathsfJ(psi underbracezeta + eta_equiv q) = underbrace-leftmu + nu(-1)^n_nu nabla^2n_nu\nright overlinezeta _textrmdissipation  ","category":"page"},{"location":"modules/barotropicqgql/#","page":"BarotropicQGQL Module","title":"BarotropicQGQL Module","text":"partial_t zeta + mathsfJ(psi overlineq) + mathsfJ(overlinepsi q) + underbracemathsfJ(psi q) - overlinemathsfJ(psi q)_textrmEENL + \nbetapartial_xpsi = underbrace-leftmu + nu(-1)^n_nu nabla^2n_nu\nright zeta_textrmdissipation + f ","category":"page"},{"location":"modules/barotropicqgql/#","page":"BarotropicQGQL Module","title":"BarotropicQGQL Module","text":"where mathsfJ(a b) = (partial_x a)(partial_y b)-(partial_y a)(partial_x b). On the right hand side, f(xyt) is forcing (which is assumed to have zero mean, overlinef=0), mu is linear drag, and nu is hyperviscosity. Plain old viscosity corresponds to n_nu=1. The sum of relative vorticity and topographic PV is denoted with qequivzeta+eta.","category":"page"},{"location":"modules/barotropicqgql/#","page":"BarotropicQGQL Module","title":"BarotropicQGQL Module","text":"Quasi-linear dynamics neglect the term eddy-eddy nonlinearity (EENL) term above.","category":"page"},{"location":"modules/barotropicqgql/#Implementation-1","page":"BarotropicQGQL Module","title":"Implementation","text":"","category":"section"},{"location":"modules/barotropicqgql/#","page":"BarotropicQGQL Module","title":"BarotropicQGQL Module","text":"The equation is time-stepped forward in Fourier space:","category":"page"},{"location":"modules/barotropicqgql/#","page":"BarotropicQGQL Module","title":"BarotropicQGQL Module","text":"partial_t widehatzeta = - widehatmathsfJ(psi q)^textrmQL +betafracmathrmik_xk^2widehatzeta -left(mu\n+nu k^2n_nuright) widehatzeta  + widehatf ","category":"page"},{"location":"modules/barotropicqgql/#","page":"BarotropicQGQL Module","title":"BarotropicQGQL Module","text":"In doing so the Jacobian is computed in the conservative form: mathsfJ(fg) = partial_y  (partial_x f) g -partial_x (partial_y f) g. The superscript QL in the Jacobian term above denotes that remove triad interactions that correspond to the EENL term.","category":"page"},{"location":"modules/barotropicqgql/#","page":"BarotropicQGQL Module","title":"BarotropicQGQL Module","text":"Thus:","category":"page"},{"location":"modules/barotropicqgql/#","page":"BarotropicQGQL Module","title":"BarotropicQGQL Module","text":"mathcalL = betafracmathrmik_xk^2 - mu - nu k^2n_nu ","category":"page"},{"location":"modules/barotropicqgql/#","page":"BarotropicQGQL Module","title":"BarotropicQGQL Module","text":"mathcalN(widehatzeta) = - mathrmik_x mathrmFFT(u q)^textrmQL-\n\tmathrmik_y mathrmFFT(upsilon q)^textrmQL ","category":"page"},{"location":"modules/barotropicqgql/#Examples-1","page":"BarotropicQGQL Module","title":"Examples","text":"","category":"section"},{"location":"modules/barotropicqgql/#","page":"BarotropicQGQL Module","title":"BarotropicQGQL Module","text":"examples/barotropicqgql_betaforced.jl: A script that simulates forced-dissipative quasi-linear quasi-geostrophic flow on a beta-plane demonstrating zonation. The forcing is temporally delta-correlated and its spatial structure is isotropic with power in a narrow annulus of total radius kf in wavenumber space. This example demonstrates that the anisotropic inverse energy cascade is not required for zonation.","category":"page"},{"location":"modules/twodnavierstokes/#TwoDNavierStokes-Module-1","page":"TwoDNavierStokes Module","title":"TwoDNavierStokes Module","text":"","category":"section"},{"location":"modules/twodnavierstokes/#Basic-Equations-1","page":"TwoDNavierStokes Module","title":"Basic Equations","text":"","category":"section"},{"location":"modules/twodnavierstokes/#","page":"TwoDNavierStokes Module","title":"TwoDNavierStokes Module","text":"This module solves two-dimensional incompressible turbulence. The flow is given through a streamfunction psi as (uupsilon) = (-partial_ypsi partial_xpsi). The dynamical variable used here is the component of the vorticity of the flow normal to the plane of motion, zeta=partial_x upsilon- partial_y u = nabla^2psi. The equation solved by the module is:","category":"page"},{"location":"modules/twodnavierstokes/#","page":"TwoDNavierStokes Module","title":"TwoDNavierStokes Module","text":"partial_t zeta + mathsfJ(psi zeta) = underbrace-leftmu(-1)^n_mu nabla^2n_mu\n+nu(-1)^n_nu nabla^2n_nuright zeta_textrmdissipation + f ","category":"page"},{"location":"modules/twodnavierstokes/#","page":"TwoDNavierStokes Module","title":"TwoDNavierStokes Module","text":"where mathsfJ(a b) = (partial_x a)(partial_y b)-(partial_y a)(partial_x b). On the right hand side, f(xyt) is forcing, mu is hypoviscosity, and nu is hyperviscosity. Plain old linear drag corresponds to n_mu=0, while normal viscosity corresponds to n_nu=1.","category":"page"},{"location":"modules/twodnavierstokes/#Implementation-1","page":"TwoDNavierStokes Module","title":"Implementation","text":"","category":"section"},{"location":"modules/twodnavierstokes/#","page":"TwoDNavierStokes Module","title":"TwoDNavierStokes Module","text":"The equation is time-stepped forward in Fourier space:","category":"page"},{"location":"modules/twodnavierstokes/#","page":"TwoDNavierStokes Module","title":"TwoDNavierStokes Module","text":"partial_t widehatzeta = - widehatmathsfJ(psi zeta) -left(mu k^2n_mu\n+nu k^2n_nuright) widehatzeta  + widehatf ","category":"page"},{"location":"modules/twodnavierstokes/#","page":"TwoDNavierStokes Module","title":"TwoDNavierStokes Module","text":"In doing so the Jacobian is computed in the conservative form: mathsfJ(ab) = partial_y  (partial_x a) b -partial_x (partial_y a) b.","category":"page"},{"location":"modules/twodnavierstokes/#","page":"TwoDNavierStokes Module","title":"TwoDNavierStokes Module","text":"Thus:","category":"page"},{"location":"modules/twodnavierstokes/#","page":"TwoDNavierStokes Module","title":"TwoDNavierStokes Module","text":"mathcalL = -mu k^-2n_mu - nu k^2n_nu ","category":"page"},{"location":"modules/twodnavierstokes/#","page":"TwoDNavierStokes Module","title":"TwoDNavierStokes Module","text":"mathcalN(widehatzeta) = - mathrmik_x mathrmFFT(u zeta)-\n\tmathrmik_y mathrmFFT(upsilon zeta) + widehatf ","category":"page"},{"location":"modules/twodnavierstokes/#AbstractTypes-and-Functions-1","page":"TwoDNavierStokes Module","title":"AbstractTypes and Functions","text":"","category":"section"},{"location":"modules/twodnavierstokes/#","page":"TwoDNavierStokes Module","title":"TwoDNavierStokes Module","text":"Params","category":"page"},{"location":"modules/twodnavierstokes/#","page":"TwoDNavierStokes Module","title":"TwoDNavierStokes Module","text":"For the unforced case (f=0) parameters AbstractType is build with Params and it includes:","category":"page"},{"location":"modules/twodnavierstokes/#","page":"TwoDNavierStokes Module","title":"TwoDNavierStokes Module","text":"ν:   Float; viscosity or hyperviscosity coefficient.\nnν: Integer0; the order of viscosity n_nu. Case n_nu=1 gives normal viscosity.\nμ: Float; bottom drag or hypoviscosity coefficient.\nnμ: Integerge 0; the order of hypodrag n_mu. Case n_mu=0 gives plain linear drag mu.","category":"page"},{"location":"modules/twodnavierstokes/#","page":"TwoDNavierStokes Module","title":"TwoDNavierStokes Module","text":"For the forced case (fne 0) parameters AbstractType is build with ForcedParams. It includes all parameters in Params and additionally:","category":"page"},{"location":"modules/twodnavierstokes/#","page":"TwoDNavierStokes Module","title":"TwoDNavierStokes Module","text":"calcF!: Function that calculates the forcing widehatf","category":"page"},{"location":"modules/twodnavierstokes/#","page":"TwoDNavierStokes Module","title":"TwoDNavierStokes Module","text":"Vars","category":"page"},{"location":"modules/twodnavierstokes/#","page":"TwoDNavierStokes Module","title":"TwoDNavierStokes Module","text":"For the unforced case (f=0) variables AbstractType is build with Vars and it includes:","category":"page"},{"location":"modules/twodnavierstokes/#","page":"TwoDNavierStokes Module","title":"TwoDNavierStokes Module","text":"zeta: Array of Floats; relative vorticity.\nu: Array of Floats; x-velocity, u.\nv: Array of Floats; y-velocity, upsilon.\nsol: Array of Complex; the solution, widehatzeta.\nzetah: Array of Complex; the Fourier transform widehatzeta.\nuh: Array of Complex; the Fourier transform widehatu.\nvh: Array of Complex; the Fourier transform widehatupsilon.","category":"page"},{"location":"modules/twodnavierstokes/#","page":"TwoDNavierStokes Module","title":"TwoDNavierStokes Module","text":"For the forced case (fne 0) variables AbstractType is build with ForcedVars. It includes all variables in Vars and additionally:","category":"page"},{"location":"modules/twodnavierstokes/#","page":"TwoDNavierStokes Module","title":"TwoDNavierStokes Module","text":"Fh: Array of Complex; the Fourier transform widehatf.\nprevsol: Array of Complex; the values of the solution sol at the previous time-step (useful for calculating the work done by the forcing).","category":"page"},{"location":"modules/twodnavierstokes/#","page":"TwoDNavierStokes Module","title":"TwoDNavierStokes Module","text":"calcN! function","category":"page"},{"location":"modules/twodnavierstokes/#","page":"TwoDNavierStokes Module","title":"TwoDNavierStokes Module","text":"The nonlinear term mathcalN(widehatzeta) is computed via functions:","category":"page"},{"location":"modules/twodnavierstokes/#","page":"TwoDNavierStokes Module","title":"TwoDNavierStokes Module","text":"calcN_advection!: computes - widehatmathsfJ(psi zeta) and stores it in array N.\ncalcN_forced!: computes - widehatmathsfJ(psi zeta) via calcN_advection! and then adds to it the forcing widehatf computed via calcF! function. Also saves the solution widehatzeta of the previous time-step in array prevsol.\nupdatevars!: uses sol to compute zeta, u, upsilon, widehatu, and widehatupsilon and stores them into corresponding arrays of Vars/ForcedVars.","category":"page"},{"location":"modules/twodnavierstokes/#Examples-1","page":"TwoDNavierStokes Module","title":"Examples","text":"","category":"section"},{"location":"modules/twodnavierstokes/#","page":"TwoDNavierStokes Module","title":"TwoDNavierStokes Module","text":"examples/twodnavierstokes_decaying.jl: A script that simulates decaying two-dimensional turbulence reproducing the results of the paper by\nMcWilliams, J. C. (1984). The emergence of isolated coherent vortices in turbulent flow. J. Fluid Mech., 146, 21-43.\nexamples/twodnavierstokes_stochasticforcing.jl: A script that simulates forced-dissipative two-dimensional turbulence with isotropic temporally delta-correlated stochastic forcing.","category":"page"},{"location":"generated/twodnavierstokes_stochasticforcing/#","page":"Two-dimensional forced-dissipative turbulence example","title":"Two-dimensional forced-dissipative turbulence example","text":"EditURL = \"https://github.com/FourierFlows/GeophysicalFlows.jl/blob/master/examples/twodnavierstokes_stochasticforcing.jl\"","category":"page"},{"location":"generated/twodnavierstokes_stochasticforcing/#Two-dimensional-forced-dissipative-turbulence-example-1","page":"Two-dimensional forced-dissipative turbulence example","title":"Two-dimensional forced-dissipative turbulence example","text":"","category":"section"},{"location":"generated/twodnavierstokes_stochasticforcing/#","page":"Two-dimensional forced-dissipative turbulence example","title":"Two-dimensional forced-dissipative turbulence example","text":"In this example, we simulate forced-dissipative two-dimensional turbulence. We solve the two-dimensional vorticity equation with linear drag and stochastic excitation.","category":"page"},{"location":"generated/twodnavierstokes_stochasticforcing/#","page":"Two-dimensional forced-dissipative turbulence example","title":"Two-dimensional forced-dissipative turbulence example","text":"using PyPlot, FourierFlows, Printf\n\nusing Random: seed!\n\nimport GeophysicalFlows.TwoDNavierStokes\nimport GeophysicalFlows.TwoDNavierStokes: energy, enstrophy, dissipation, work, drag","category":"page"},{"location":"generated/twodnavierstokes_stochasticforcing/#Choosing-a-device:-CPU-or-GPU-1","page":"Two-dimensional forced-dissipative turbulence example","title":"Choosing a device: CPU or GPU","text":"","category":"section"},{"location":"generated/twodnavierstokes_stochasticforcing/#","page":"Two-dimensional forced-dissipative turbulence example","title":"Two-dimensional forced-dissipative turbulence example","text":"dev = CPU()    # Device (CPU/GPU)\nnothing # hide","category":"page"},{"location":"generated/twodnavierstokes_stochasticforcing/#Numerical,-domain,-and-simulation-parameters-1","page":"Two-dimensional forced-dissipative turbulence example","title":"Numerical, domain, and simulation parameters","text":"","category":"section"},{"location":"generated/twodnavierstokes_stochasticforcing/#","page":"Two-dimensional forced-dissipative turbulence example","title":"Two-dimensional forced-dissipative turbulence example","text":"First, we pick some numerical and physical parameters for our model.","category":"page"},{"location":"generated/twodnavierstokes_stochasticforcing/#","page":"Two-dimensional forced-dissipative turbulence example","title":"Two-dimensional forced-dissipative turbulence example","text":" n, L  = 256, 2π             # grid resolution and domain length\n ν, nν = 1e-7, 2             # hyperviscosity coefficient and order\n μ, nμ = 1e-1, 0             # linear drag coefficient\ndt, tf = 0.005, 0.2/μ        # timestep and final time\n    nt = round(Int, tf/dt)   # total timesteps\n    ns = 4                   # how many intermediate times we want to plot\nnothing # hide","category":"page"},{"location":"generated/twodnavierstokes_stochasticforcing/#Forcing-1","page":"Two-dimensional forced-dissipative turbulence example","title":"Forcing","text":"","category":"section"},{"location":"generated/twodnavierstokes_stochasticforcing/#","page":"Two-dimensional forced-dissipative turbulence example","title":"Two-dimensional forced-dissipative turbulence example","text":"We force the vorticity equation with stochastic excitation that is delta-correlated in time and while spatially homogeneously and isotropically correlated. The forcing has a spectrum with power in a ring in wavenumber space of radious k_f and width delta k_f, and it injects energy per unit area and per unit time equal to varepsilon.","category":"page"},{"location":"generated/twodnavierstokes_stochasticforcing/#","page":"Two-dimensional forced-dissipative turbulence example","title":"Two-dimensional forced-dissipative turbulence example","text":"kf, dkf = 12.0, 2.0     # forcing central wavenumber, wavenumber width\nε = 0.1                 # energy injection rate\n\ngr   = TwoDGrid(dev, n, L)\nx, y = gridpoints(gr)\n\nKr = ArrayType(dev)([ gr.kr[i] for i=1:gr.nkr, j=1:gr.nl])\n\nforcingcovariancespectrum = @. exp(-(sqrt(gr.Krsq)-kf)^2/(2*dkf^2))\nforcingcovariancespectrum[gr.Krsq .< 2.0^2 ] .= 0  # making sure that focing has no power for low wavenumbers\nforcingcovariancespectrum[gr.Krsq .> 20.0^2 ] .= 0 # making sure that focing has no power for high wavenumbers\nforcingcovariancespectrum[Kr .< 2π/L] .= 0\nε0 = FourierFlows.parsevalsum(forcingcovariancespectrum.*gr.invKrsq/2.0, gr)/(gr.Lx*gr.Ly)\nforcingcovariancespectrum .= ε/ε0 * forcingcovariancespectrum # normalize forcing to inject energy ε\n\nseed!(1234)\nnothing # hide","category":"page"},{"location":"generated/twodnavierstokes_stochasticforcing/#","page":"Two-dimensional forced-dissipative turbulence example","title":"Two-dimensional forced-dissipative turbulence example","text":"Next we construct function calcF! that computes a forcing realization every timestep","category":"page"},{"location":"generated/twodnavierstokes_stochasticforcing/#","page":"Two-dimensional forced-dissipative turbulence example","title":"Two-dimensional forced-dissipative turbulence example","text":"function calcF!(Fh, sol, t, cl, v, p, g)\n  eta = ArrayType(dev)(exp.(2π*im*rand(typeof(gr.Lx), size(sol)))/sqrt(cl.dt))\n  eta[1, 1] = 0\n  @. Fh = eta*sqrt(forcingcovariancespectrum)\n  nothing\nend\nnothing # hide","category":"page"},{"location":"generated/twodnavierstokes_stochasticforcing/#Problem-setup-1","page":"Two-dimensional forced-dissipative turbulence example","title":"Problem setup","text":"","category":"section"},{"location":"generated/twodnavierstokes_stochasticforcing/#","page":"Two-dimensional forced-dissipative turbulence example","title":"Two-dimensional forced-dissipative turbulence example","text":"We initialize a Problem by providing a set of keyword arguments. The stepper keyword defines the time-stepper to be used.","category":"page"},{"location":"generated/twodnavierstokes_stochasticforcing/#","page":"Two-dimensional forced-dissipative turbulence example","title":"Two-dimensional forced-dissipative turbulence example","text":"prob = TwoDNavierStokes.Problem(nx=n, Lx=L, ν=ν, nν=nν, μ=μ, nμ=nμ, dt=dt, stepper=\"RK4\",\n                        calcF=calcF!, stochastic=true, dev=dev)\nnothing # hide","category":"page"},{"location":"generated/twodnavierstokes_stochasticforcing/#","page":"Two-dimensional forced-dissipative turbulence example","title":"Two-dimensional forced-dissipative turbulence example","text":"and define some shortcuts","category":"page"},{"location":"generated/twodnavierstokes_stochasticforcing/#","page":"Two-dimensional forced-dissipative turbulence example","title":"Two-dimensional forced-dissipative turbulence example","text":"sol, cl, v, p, g = prob.sol, prob.clock, prob.vars, prob.params, prob.grid\nnothing # hide","category":"page"},{"location":"generated/twodnavierstokes_stochasticforcing/#Setting-initial-conditions-1","page":"Two-dimensional forced-dissipative turbulence example","title":"Setting initial conditions","text":"","category":"section"},{"location":"generated/twodnavierstokes_stochasticforcing/#","page":"Two-dimensional forced-dissipative turbulence example","title":"Two-dimensional forced-dissipative turbulence example","text":"Our initial condition is simply fluid at rest.","category":"page"},{"location":"generated/twodnavierstokes_stochasticforcing/#","page":"Two-dimensional forced-dissipative turbulence example","title":"Two-dimensional forced-dissipative turbulence example","text":"TwoDNavierStokes.set_zeta!(prob, 0*x)","category":"page"},{"location":"generated/twodnavierstokes_stochasticforcing/#Diagnostics-1","page":"Two-dimensional forced-dissipative turbulence example","title":"Diagnostics","text":"","category":"section"},{"location":"generated/twodnavierstokes_stochasticforcing/#","page":"Two-dimensional forced-dissipative turbulence example","title":"Two-dimensional forced-dissipative turbulence example","text":"Create Diagnostics; the diagnostics here will probe the energy budget","category":"page"},{"location":"generated/twodnavierstokes_stochasticforcing/#","page":"Two-dimensional forced-dissipative turbulence example","title":"Two-dimensional forced-dissipative turbulence example","text":"E = Diagnostic(energy,      prob, nsteps=nt) # energy\nR = Diagnostic(drag,        prob, nsteps=nt) # dissipation by drag\nD = Diagnostic(dissipation, prob, nsteps=nt) # dissipation by hyperviscosity\nW = Diagnostic(work,        prob, nsteps=nt) # work input by forcing\ndiags = [E, D, W, R] # A list of Diagnostics types passed to \"stepforward!\" will  be updated every timestep.\nnothing # hide","category":"page"},{"location":"generated/twodnavierstokes_stochasticforcing/#Visualizing-the-simulation-1","page":"Two-dimensional forced-dissipative turbulence example","title":"Visualizing the simulation","text":"","category":"section"},{"location":"generated/twodnavierstokes_stochasticforcing/#","page":"Two-dimensional forced-dissipative turbulence example","title":"Two-dimensional forced-dissipative turbulence example","text":"We define a function that plots the vorticity field and the evolution of the diagnostics: energy and all terms involved in the energy budget. Last we confirm whether the energy budget is accurate, i.e., mathrmdEmathrmdt = W - R - D.","category":"page"},{"location":"generated/twodnavierstokes_stochasticforcing/#","page":"Two-dimensional forced-dissipative turbulence example","title":"Two-dimensional forced-dissipative turbulence example","text":"function makeplot(prob, diags)\n  TwoDNavierStokes.updatevars!(prob)\n  E, D, W, R = diags\n\n  t = round(μ*cl.t, digits=2)\n  sca(axs[1]); cla()\n  pcolormesh(x, y, v.zeta)\n  xlabel(L\"$x$\")\n  ylabel(L\"$y$\")\n  title(\"\\$\\\\nabla^2\\\\psi(x,y,\\\\mu t= $t )\\$\")\n  axis(\"square\")\n\n  sca(axs[3]); cla()\n\n  i₀ = 1\n  dEdt = (E[(i₀+1):E.i] - E[i₀:E.i-1])/cl.dt #numerical first-order approximation of energy tendency\n  ii = (i₀):E.i-1\n  ii2 = (i₀+1):E.i\n\n  total = W[ii2] - D[ii] - R[ii]        # Stratonovich interpretation\n  residual = dEdt - total\n\n  plot(μ*E.t[ii], W[ii2], label=L\"work ($W$)\")\n  plot(μ*E.t[ii], ε .+ 0*E.t[ii], \"--\", label=L\"ensemble mean  work ($\\langle W\\rangle $)\")\n  plot(μ*E.t[ii], -D[ii], label=\"dissipation (\\$D\\$)\")\n  plot(μ*E.t[ii], -R[ii], label=L\"drag ($D=2\\mu E$)\")\n  plot(μ*E.t[ii], 0*E.t[ii], \"k:\", linewidth=0.5)\n  ylabel(\"Energy sources and sinks\")\n  xlabel(L\"$\\mu t$\")\n  legend(fontsize=10)\n\n  sca(axs[2]); cla()\n  plot(μ*E.t[ii], total[ii], label=L\"computed $W-D$\")\n  plot(μ*E.t[ii], dEdt, \"--k\", label=L\"numerical $dE/dt$\")\n  ylabel(L\"$dE/dt$\")\n  xlabel(L\"$\\mu t$\")\n  legend(fontsize=10)\n\n  sca(axs[4]); cla()\n  plot(μ*E.t[ii], residual, \"c-\", label=L\"residual $dE/dt$ = computed $-$ numerical\")\n  xlabel(L\"$\\mu t$\")\n  legend(fontsize=10)\nend\nnothing # hide","category":"page"},{"location":"generated/twodnavierstokes_stochasticforcing/#Time-stepping-the-Problem-forward-1","page":"Two-dimensional forced-dissipative turbulence example","title":"Time-stepping the Problem forward","text":"","category":"section"},{"location":"generated/twodnavierstokes_stochasticforcing/#","page":"Two-dimensional forced-dissipative turbulence example","title":"Two-dimensional forced-dissipative turbulence example","text":"Finally, we time-step the Problem forward in time.","category":"page"},{"location":"generated/twodnavierstokes_stochasticforcing/#","page":"Two-dimensional forced-dissipative turbulence example","title":"Two-dimensional forced-dissipative turbulence example","text":"startwalltime = time()\nfor i = 1:ns\n  stepforward!(prob, diags, round(Int, nt/ns))\n  TwoDNavierStokes.updatevars!(prob)\n  cfl = cl.dt*maximum([maximum(v.u)/g.dx, maximum(v.v)/g.dy])\n\n  log = @sprintf(\"step: %04d, t: %.1f, cfl: %.3f, walltime: %.2f min\", cl.step, cl.t,\n        cfl, (time()-startwalltime)/60)\n\n  println(log)\nend","category":"page"},{"location":"generated/twodnavierstokes_stochasticforcing/#Plot-1","page":"Two-dimensional forced-dissipative turbulence example","title":"Plot","text":"","category":"section"},{"location":"generated/twodnavierstokes_stochasticforcing/#","page":"Two-dimensional forced-dissipative turbulence example","title":"Two-dimensional forced-dissipative turbulence example","text":"And now let's see what we got. We plot the output.","category":"page"},{"location":"generated/twodnavierstokes_stochasticforcing/#","page":"Two-dimensional forced-dissipative turbulence example","title":"Two-dimensional forced-dissipative turbulence example","text":"fig, axs = subplots(ncols=2, nrows=2, figsize=(12, 8))\nmakeplot(prob, diags)\ngcf() # hide","category":"page"},{"location":"generated/twodnavierstokes_stochasticforcing/#","page":"Two-dimensional forced-dissipative turbulence example","title":"Two-dimensional forced-dissipative turbulence example","text":"","category":"page"},{"location":"generated/twodnavierstokes_stochasticforcing/#","page":"Two-dimensional forced-dissipative turbulence example","title":"Two-dimensional forced-dissipative turbulence example","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/twodnavierstokes_decaying/#","page":"Two-dimensional decaying turbulence","title":"Two-dimensional decaying turbulence","text":"EditURL = \"https://github.com/FourierFlows/GeophysicalFlows.jl/blob/master/examples/twodnavierstokes_decaying.jl\"","category":"page"},{"location":"generated/twodnavierstokes_decaying/#Two-dimensional-decaying-turbulence-1","page":"Two-dimensional decaying turbulence","title":"Two-dimensional decaying turbulence","text":"","category":"section"},{"location":"generated/twodnavierstokes_decaying/#","page":"Two-dimensional decaying turbulence","title":"Two-dimensional decaying turbulence","text":"In this example, we simulate decaying two-dimensional turbulence by solving the two-dimensional vorticity equation.","category":"page"},{"location":"generated/twodnavierstokes_decaying/#","page":"Two-dimensional decaying turbulence","title":"Two-dimensional decaying turbulence","text":"using FourierFlows, PyPlot, JLD2, Printf, Random, FFTW\n\nusing Random: seed!\nusing FFTW: rfft\n\nimport GeophysicalFlows.TwoDNavierStokes\nimport GeophysicalFlows.TwoDNavierStokes: energy, enstrophy\nimport GeophysicalFlows: peakedisotropicspectrum","category":"page"},{"location":"generated/twodnavierstokes_decaying/#Choosing-a-device:-CPU-or-GPU-1","page":"Two-dimensional decaying turbulence","title":"Choosing a device: CPU or GPU","text":"","category":"section"},{"location":"generated/twodnavierstokes_decaying/#","page":"Two-dimensional decaying turbulence","title":"Two-dimensional decaying turbulence","text":"dev = CPU()     # Device (CPU/GPU)\nnothing # hide","category":"page"},{"location":"generated/twodnavierstokes_decaying/#Numerical,-domain,-and-simulation-parameters-1","page":"Two-dimensional decaying turbulence","title":"Numerical, domain, and simulation parameters","text":"","category":"section"},{"location":"generated/twodnavierstokes_decaying/#","page":"Two-dimensional decaying turbulence","title":"Two-dimensional decaying turbulence","text":"First, we pick some numerical and physical parameters for our model.","category":"page"},{"location":"generated/twodnavierstokes_decaying/#","page":"Two-dimensional decaying turbulence","title":"Two-dimensional decaying turbulence","text":"n, L  = 128, 2π             # grid resolution and domain length\nnothing # hide\n\n# Then we pick the time-stepper parameters\n    dt = 1e-2  # timestep\nnsteps = 4000  # total number of steps\n nsubs = 1000  # number of steps between each plot\n nothing # hide","category":"page"},{"location":"generated/twodnavierstokes_decaying/#Problem-setup-1","page":"Two-dimensional decaying turbulence","title":"Problem setup","text":"","category":"section"},{"location":"generated/twodnavierstokes_decaying/#","page":"Two-dimensional decaying turbulence","title":"Two-dimensional decaying turbulence","text":"We initialize a Problem by providing a set of keyword arguments. The stepper keyword defines the time-stepper to be used,","category":"page"},{"location":"generated/twodnavierstokes_decaying/#","page":"Two-dimensional decaying turbulence","title":"Two-dimensional decaying turbulence","text":"prob = TwoDNavierStokes.Problem(; nx=n, Lx=L, ny=n, Ly=L, dt=dt, stepper=\"FilteredRK4\", dev=dev)\nnothing # hide","category":"page"},{"location":"generated/twodnavierstokes_decaying/#","page":"Two-dimensional decaying turbulence","title":"Two-dimensional decaying turbulence","text":"and define some shortcuts","category":"page"},{"location":"generated/twodnavierstokes_decaying/#","page":"Two-dimensional decaying turbulence","title":"Two-dimensional decaying turbulence","text":"sol, cl, vs, gr, filter = prob.sol, prob.clock, prob.vars, prob.grid, prob.timestepper.filter\nx, y = gridpoints(gr)\nnothing # hide","category":"page"},{"location":"generated/twodnavierstokes_decaying/#Setting-initial-conditions-1","page":"Two-dimensional decaying turbulence","title":"Setting initial conditions","text":"","category":"section"},{"location":"generated/twodnavierstokes_decaying/#","page":"Two-dimensional decaying turbulence","title":"Two-dimensional decaying turbulence","text":"Our initial condition closely tries to reproduce the initial condition used in the paper by McWilliams (JFM, 1984)","category":"page"},{"location":"generated/twodnavierstokes_decaying/#","page":"Two-dimensional decaying turbulence","title":"Two-dimensional decaying turbulence","text":"seed!(1234)\nk0, E0 = 6, 0.5\nzetai  = peakedisotropicspectrum(gr, k0, E0, mask=filter)\nTwoDNavierStokes.set_zeta!(prob, zetai)\nnothing # hide","category":"page"},{"location":"generated/twodnavierstokes_decaying/#Diagnostics-1","page":"Two-dimensional decaying turbulence","title":"Diagnostics","text":"","category":"section"},{"location":"generated/twodnavierstokes_decaying/#","page":"Two-dimensional decaying turbulence","title":"Two-dimensional decaying turbulence","text":"Create Diagnostics – energy and enstrophy functions are imported at the top.","category":"page"},{"location":"generated/twodnavierstokes_decaying/#","page":"Two-dimensional decaying turbulence","title":"Two-dimensional decaying turbulence","text":"E = Diagnostic(energy, prob; nsteps=nsteps)\nZ = Diagnostic(enstrophy, prob; nsteps=nsteps)\ndiags = [E, Z] # A list of Diagnostics types passed to \"stepforward!\" will  be updated every timestep.\nnothing # hide","category":"page"},{"location":"generated/twodnavierstokes_decaying/#Output-1","page":"Two-dimensional decaying turbulence","title":"Output","text":"","category":"section"},{"location":"generated/twodnavierstokes_decaying/#","page":"Two-dimensional decaying turbulence","title":"Two-dimensional decaying turbulence","text":"We choose folder for outputing .jld2 files and snapshots (.png files).","category":"page"},{"location":"generated/twodnavierstokes_decaying/#","page":"Two-dimensional decaying turbulence","title":"Two-dimensional decaying turbulence","text":"filepath = \".\"\nplotpath = \"./plots_decayingTwoDNavierStokes\"\nplotname = \"snapshots\"\nfilename = joinpath(filepath, \"decayingTwoDNavierStokes.jld2\")\nnothing # hide","category":"page"},{"location":"generated/twodnavierstokes_decaying/#","page":"Two-dimensional decaying turbulence","title":"Two-dimensional decaying turbulence","text":"Do some basic file management","category":"page"},{"location":"generated/twodnavierstokes_decaying/#","page":"Two-dimensional decaying turbulence","title":"Two-dimensional decaying turbulence","text":"if isfile(filename); rm(filename); end\nif !isdir(plotpath); mkdir(plotpath); end\nnothing # hide","category":"page"},{"location":"generated/twodnavierstokes_decaying/#","page":"Two-dimensional decaying turbulence","title":"Two-dimensional decaying turbulence","text":"And then create Output","category":"page"},{"location":"generated/twodnavierstokes_decaying/#","page":"Two-dimensional decaying turbulence","title":"Two-dimensional decaying turbulence","text":"get_sol(prob) = Array(prob.sol) # extracts the Fourier-transformed solution\nget_u(prob) = Array(irfft(im*gr.l.*gr.invKrsq.*sol, gr.nx))\nout = Output(prob, filename, (:sol, get_sol), (:u, get_u))\nsaveproblem(out)\nnothing # hide","category":"page"},{"location":"generated/twodnavierstokes_decaying/#Visualizing-the-simulation-1","page":"Two-dimensional decaying turbulence","title":"Visualizing the simulation","text":"","category":"section"},{"location":"generated/twodnavierstokes_decaying/#","page":"Two-dimensional decaying turbulence","title":"Two-dimensional decaying turbulence","text":"We define a function that plots the vorticity field and the evolution of energy and enstrophy diagnostics.","category":"page"},{"location":"generated/twodnavierstokes_decaying/#","page":"Two-dimensional decaying turbulence","title":"Two-dimensional decaying turbulence","text":"function plot_output(prob, fig, axs; drawcolorbar=false)\n  TwoDNavierStokes.updatevars!(prob)\n  sca(axs[1])\n  pcolormesh(x, y, vs.zeta)\n  title(\"Vorticity\")\n  clim(-40, 40)\n  axis(\"off\")\n  axis(\"square\")\n  if drawcolorbar==true\n    colorbar()\n  end\n\n  sca(axs[2])\n  cla()\n  plot(E.t[1:E.i], E.data[1:E.i]/E.data[1], label=\"energy \\$E(t)/E(0)\\$\")\n  plot(Z.t[1:Z.i], Z.data[1:E.i]/Z.data[1], label=\"enstrophy \\$Z(t)/Z(0)\\$\")\n  xlabel(L\"t\")\n  ylabel(L\"\\Delta E, \\, \\Delta Z\")\nend\nnothing # hide","category":"page"},{"location":"generated/twodnavierstokes_decaying/#Time-stepping-the-Problem-forward-1","page":"Two-dimensional decaying turbulence","title":"Time-stepping the Problem forward","text":"","category":"section"},{"location":"generated/twodnavierstokes_decaying/#","page":"Two-dimensional decaying turbulence","title":"Two-dimensional decaying turbulence","text":"We time-step the Problem forward in time.","category":"page"},{"location":"generated/twodnavierstokes_decaying/#","page":"Two-dimensional decaying turbulence","title":"Two-dimensional decaying turbulence","text":"startwalltime = time()\nwhile cl.step < nsteps\n  stepforward!(prob, diags, nsubs)\n  saveoutput(out)\n\n  log = @sprintf(\"step: %04d, t: %d, ΔE: %.4f, ΔZ: %.4f, walltime: %.2f min\",\n    cl.step, cl.t, E.data[E.i]/E.data[1], Z.data[Z.i]/Z.data[1], (time()-startwalltime)/60)\n\n  println(log)\nend\nprintln(\"finished\")","category":"page"},{"location":"generated/twodnavierstokes_decaying/#Plot-1","page":"Two-dimensional decaying turbulence","title":"Plot","text":"","category":"section"},{"location":"generated/twodnavierstokes_decaying/#","page":"Two-dimensional decaying turbulence","title":"Two-dimensional decaying turbulence","text":"Now let's see what we got. We plot the output,","category":"page"},{"location":"generated/twodnavierstokes_decaying/#","page":"Two-dimensional decaying turbulence","title":"Two-dimensional decaying turbulence","text":"fig, axs = subplots(ncols=2, nrows=1, figsize=(12, 4))\nplot_output(prob, fig, axs; drawcolorbar=true)\ngcf() # hide","category":"page"},{"location":"generated/twodnavierstokes_decaying/#","page":"Two-dimensional decaying turbulence","title":"Two-dimensional decaying turbulence","text":"and finally save the figure","category":"page"},{"location":"generated/twodnavierstokes_decaying/#","page":"Two-dimensional decaying turbulence","title":"Two-dimensional decaying turbulence","text":"savename = @sprintf(\"%s_%09d.png\", joinpath(plotpath, plotname), cl.step)\nsavefig(savename, dpi=240)","category":"page"},{"location":"generated/twodnavierstokes_decaying/#Radial-energy-spectrum-1","page":"Two-dimensional decaying turbulence","title":"Radial energy spectrum","text":"","category":"section"},{"location":"generated/twodnavierstokes_decaying/#","page":"Two-dimensional decaying turbulence","title":"Two-dimensional decaying turbulence","text":"After the simulation is done we plot the radial energy spectrum to illustrate how FourierFlows.radialspectrum can be used,","category":"page"},{"location":"generated/twodnavierstokes_decaying/#","page":"Two-dimensional decaying turbulence","title":"Two-dimensional decaying turbulence","text":"E  = @. 0.5*(vs.u^2 + vs.v^2) # energy density\nEh = rfft(E)                  # Fourier transform of energy density\nkr, Ehr = FourierFlows.radialspectrum(Eh, gr, refinement=1) # compute radial specturm of `Eh`\nnothing # hide","category":"page"},{"location":"generated/twodnavierstokes_decaying/#","page":"Two-dimensional decaying turbulence","title":"Two-dimensional decaying turbulence","text":"and we plot it.","category":"page"},{"location":"generated/twodnavierstokes_decaying/#","page":"Two-dimensional decaying turbulence","title":"Two-dimensional decaying turbulence","text":"fig2, axs = subplots(ncols=2, figsize=(8, 4))\n\nsca(axs[1])\npcolormesh(x, y, vs.zeta)\nxlabel(L\"x\")\nylabel(L\"y\")\ntitle(\"Vorticity\")\ncolorbar()\nclim(-40, 40)\naxis(\"off\")\naxis(\"square\")\n\nsca(axs[2])\nplot(kr, abs.(Ehr))\nxlabel(L\"k_r\")\nylabel(L\"\\int | \\hat{E} | \\, k_r \\,\\mathrm{d} k_{\\theta}\")\ntitle(\"Radial energy spectrum\")\n\naxs[2].set_xscale(\"log\")\naxs[2].set_yscale(\"log\")\naxs[2].set_xlim(5e-1, gr.nx)\ntight_layout(w_pad=0.1)\ngcf() # hide","category":"page"},{"location":"generated/twodnavierstokes_decaying/#","page":"Two-dimensional decaying turbulence","title":"Two-dimensional decaying turbulence","text":"","category":"page"},{"location":"generated/twodnavierstokes_decaying/#","page":"Two-dimensional decaying turbulence","title":"Two-dimensional decaying turbulence","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/barotropicqg_acc/#","page":"Decaying barotropic quasi-geostropic turbulence on a beta-plane","title":"Decaying barotropic quasi-geostropic turbulence on a beta-plane","text":"EditURL = \"https://github.com/FourierFlows/GeophysicalFlows.jl/blob/master/examples/barotropicqg_acc.jl\"","category":"page"},{"location":"generated/barotropicqg_acc/#Decaying-barotropic-quasi-geostropic-turbulence-on-a-beta-plane-1","page":"Decaying barotropic quasi-geostropic turbulence on a beta-plane","title":"Decaying barotropic quasi-geostropic turbulence on a beta-plane","text":"","category":"section"},{"location":"generated/barotropicqg_acc/#","page":"Decaying barotropic quasi-geostropic turbulence on a beta-plane","title":"Decaying barotropic quasi-geostropic turbulence on a beta-plane","text":"In this example, we simulate an idealized version of the Southern Ocean. The model solves the barotropic quasi-geostrophic eddy dynamics in a flud with variable depth H-h(xy). We also include an ``ACC'', i.e.,  a domain-average zonal velocity U(t) which is forced by constant wind stress F and influenced by bottom drag and topographic form stress. The equations solved are: partial_t nabla^2psi + mathsfJ(psi-U y nabla^2psi + beta y + eta) = -munabla^2psi  partial_t U = F - mu U -  langlepsipartial_xetarangle","category":"page"},{"location":"generated/barotropicqg_acc/#","page":"Decaying barotropic quasi-geostropic turbulence on a beta-plane","title":"Decaying barotropic quasi-geostropic turbulence on a beta-plane","text":"using FourierFlows, PyPlot, JLD2, Printf\n\nusing FFTW: ifft\n\nimport GeophysicalFlows.BarotropicQG\nimport GeophysicalFlows.BarotropicQG: energy, meanenergy, enstrophy, meanenstrophy","category":"page"},{"location":"generated/barotropicqg_acc/#Choosing-a-device:-CPU-or-GPU-1","page":"Decaying barotropic quasi-geostropic turbulence on a beta-plane","title":"Choosing a device: CPU or GPU","text":"","category":"section"},{"location":"generated/barotropicqg_acc/#","page":"Decaying barotropic quasi-geostropic turbulence on a beta-plane","title":"Decaying barotropic quasi-geostropic turbulence on a beta-plane","text":"dev = CPU()     # Device (CPU/GPU)\nnothing # hide","category":"page"},{"location":"generated/barotropicqg_acc/#Numerical-parameters-and-time-stepping-parameters-1","page":"Decaying barotropic quasi-geostropic turbulence on a beta-plane","title":"Numerical parameters and time-stepping parameters","text":"","category":"section"},{"location":"generated/barotropicqg_acc/#","page":"Decaying barotropic quasi-geostropic turbulence on a beta-plane","title":"Decaying barotropic quasi-geostropic turbulence on a beta-plane","text":"nx  = 128      # 2D resolution = nx^2\nstepper = \"ETDRK4\"   # timestepper\ndt  = 1e-1     # timestep\nnsteps = 10000 # total number of time-steps\nnsubs  = 2500  # number of time-steps for intermediate logging/plotting (nsteps must be multiple of nsubs)\nnothing # hide","category":"page"},{"location":"generated/barotropicqg_acc/#Physical-parameters-1","page":"Decaying barotropic quasi-geostropic turbulence on a beta-plane","title":"Physical parameters","text":"","category":"section"},{"location":"generated/barotropicqg_acc/#","page":"Decaying barotropic quasi-geostropic turbulence on a beta-plane","title":"Decaying barotropic quasi-geostropic turbulence on a beta-plane","text":"Lx = 2π        # domain size\n ν = 4e-15     # viscosity\nnν = 4         # viscosity order\nf0 = -1.0      # Coriolis parameter\n β = 1.4015    # the y-gradient of planetary PV\n μ = 1e-2      # linear drag\n F = 0.0012    # normalized wind stress forcing on domain-averaged zonal flow U(t) flow\n nothing # hide","category":"page"},{"location":"generated/barotropicqg_acc/#","page":"Decaying barotropic quasi-geostropic turbulence on a beta-plane","title":"Decaying barotropic quasi-geostropic turbulence on a beta-plane","text":"Topographic PV","category":"page"},{"location":"generated/barotropicqg_acc/#","page":"Decaying barotropic quasi-geostropic turbulence on a beta-plane","title":"Decaying barotropic quasi-geostropic turbulence on a beta-plane","text":"topoPV(x, y) = @. 2*cos(4x)*cos(4y)\nnothing # hide","category":"page"},{"location":"generated/barotropicqg_acc/#","page":"Decaying barotropic quasi-geostropic turbulence on a beta-plane","title":"Decaying barotropic quasi-geostropic turbulence on a beta-plane","text":"Forcing on the domain-averaged U equation","category":"page"},{"location":"generated/barotropicqg_acc/#","page":"Decaying barotropic quasi-geostropic turbulence on a beta-plane","title":"Decaying barotropic quasi-geostropic turbulence on a beta-plane","text":"calcFU(t) = F\nnothing # hide","category":"page"},{"location":"generated/barotropicqg_acc/#Problem-setup-1","page":"Decaying barotropic quasi-geostropic turbulence on a beta-plane","title":"Problem setup","text":"","category":"section"},{"location":"generated/barotropicqg_acc/#","page":"Decaying barotropic quasi-geostropic turbulence on a beta-plane","title":"Decaying barotropic quasi-geostropic turbulence on a beta-plane","text":"We initialize a Problem by providing a set of keyword arguments. The stepper keyword defines the time-stepper to be used,","category":"page"},{"location":"generated/barotropicqg_acc/#","page":"Decaying barotropic quasi-geostropic turbulence on a beta-plane","title":"Decaying barotropic quasi-geostropic turbulence on a beta-plane","text":"prob = BarotropicQG.Problem(nx=nx, Lx=Lx, f0=f0, β=β, eta=topoPV,\n                  calcFU=calcFU, ν=ν, nν=nν, μ=μ, dt=dt, stepper=stepper, dev=dev)\nnothing # hide","category":"page"},{"location":"generated/barotropicqg_acc/#","page":"Decaying barotropic quasi-geostropic turbulence on a beta-plane","title":"Decaying barotropic quasi-geostropic turbulence on a beta-plane","text":"and define some shortcuts","category":"page"},{"location":"generated/barotropicqg_acc/#","page":"Decaying barotropic quasi-geostropic turbulence on a beta-plane","title":"Decaying barotropic quasi-geostropic turbulence on a beta-plane","text":"sol, cl, v, p, g = prob.sol, prob.clock, prob.vars, prob.params, prob.grid\nx, y = gridpoints(g)\nnothing # hide","category":"page"},{"location":"generated/barotropicqg_acc/#Setting-initial-conditions-1","page":"Decaying barotropic quasi-geostropic turbulence on a beta-plane","title":"Setting initial conditions","text":"","category":"section"},{"location":"generated/barotropicqg_acc/#","page":"Decaying barotropic quasi-geostropic turbulence on a beta-plane","title":"Decaying barotropic quasi-geostropic turbulence on a beta-plane","text":"Our initial condition is simply fluid at rest.","category":"page"},{"location":"generated/barotropicqg_acc/#","page":"Decaying barotropic quasi-geostropic turbulence on a beta-plane","title":"Decaying barotropic quasi-geostropic turbulence on a beta-plane","text":"BarotropicQG.set_zeta!(prob, 0*x)","category":"page"},{"location":"generated/barotropicqg_acc/#Diagnostics-1","page":"Decaying barotropic quasi-geostropic turbulence on a beta-plane","title":"Diagnostics","text":"","category":"section"},{"location":"generated/barotropicqg_acc/#","page":"Decaying barotropic quasi-geostropic turbulence on a beta-plane","title":"Decaying barotropic quasi-geostropic turbulence on a beta-plane","text":"Create Diagnostics – energy and enstrophy functions are imported at the top.","category":"page"},{"location":"generated/barotropicqg_acc/#","page":"Decaying barotropic quasi-geostropic turbulence on a beta-plane","title":"Decaying barotropic quasi-geostropic turbulence on a beta-plane","text":"E = Diagnostic(energy, prob; nsteps=nsteps)\nQ = Diagnostic(enstrophy, prob; nsteps=nsteps)\nEmean = Diagnostic(meanenergy, prob; nsteps=nsteps)\nQmean = Diagnostic(meanenergy, prob; nsteps=nsteps)\ndiags = [E, Emean, Q, Qmean]\nnothing # hide","category":"page"},{"location":"generated/barotropicqg_acc/#Output-1","page":"Decaying barotropic quasi-geostropic turbulence on a beta-plane","title":"Output","text":"","category":"section"},{"location":"generated/barotropicqg_acc/#","page":"Decaying barotropic quasi-geostropic turbulence on a beta-plane","title":"Decaying barotropic quasi-geostropic turbulence on a beta-plane","text":"We choose folder for outputing .jld2 files and snapshots (.png files).","category":"page"},{"location":"generated/barotropicqg_acc/#","page":"Decaying barotropic quasi-geostropic turbulence on a beta-plane","title":"Decaying barotropic quasi-geostropic turbulence on a beta-plane","text":"filepath = \".\"\nplotpath = \"./plots_acctopo\"\nplotname = \"snapshots\"\nfilename = joinpath(filepath, \"acctopo.jl.jld2\")\nnothing # hide","category":"page"},{"location":"generated/barotropicqg_acc/#","page":"Decaying barotropic quasi-geostropic turbulence on a beta-plane","title":"Decaying barotropic quasi-geostropic turbulence on a beta-plane","text":"Do some basic file management","category":"page"},{"location":"generated/barotropicqg_acc/#","page":"Decaying barotropic quasi-geostropic turbulence on a beta-plane","title":"Decaying barotropic quasi-geostropic turbulence on a beta-plane","text":"if isfile(filename); rm(filename); end\nif !isdir(plotpath); mkdir(plotpath); end\nnothing # hide","category":"page"},{"location":"generated/barotropicqg_acc/#","page":"Decaying barotropic quasi-geostropic turbulence on a beta-plane","title":"Decaying barotropic quasi-geostropic turbulence on a beta-plane","text":"And then create Output","category":"page"},{"location":"generated/barotropicqg_acc/#","page":"Decaying barotropic quasi-geostropic turbulence on a beta-plane","title":"Decaying barotropic quasi-geostropic turbulence on a beta-plane","text":"get_sol(prob) = sol # extracts the Fourier-transformed solution\nget_u(prob) = irfft(im*g.lr.*g.invKrsq.*sol, g.nx)\nout = Output(prob, filename, (:sol, get_sol), (:u, get_u))\nnothing # hide","category":"page"},{"location":"generated/barotropicqg_acc/#Visualizing-the-simulation-1","page":"Decaying barotropic quasi-geostropic turbulence on a beta-plane","title":"Visualizing the simulation","text":"","category":"section"},{"location":"generated/barotropicqg_acc/#","page":"Decaying barotropic quasi-geostropic turbulence on a beta-plane","title":"Decaying barotropic quasi-geostropic turbulence on a beta-plane","text":"We define a function that plots the potential vorticity field and the evolution of energy and enstrophy.","category":"page"},{"location":"generated/barotropicqg_acc/#","page":"Decaying barotropic quasi-geostropic turbulence on a beta-plane","title":"Decaying barotropic quasi-geostropic turbulence on a beta-plane","text":"function plot_output(prob, fig, axs; drawcolorbar=false)\n\n  sol, v, p, g = prob.sol, prob.vars, prob.params, prob.grid\n  BarotropicQG.updatevars!(prob)\n\n  sca(axs[1])\n  pcolormesh(x, y, v.q)\n  axis(\"square\")\n  xticks(-2:2)\n  yticks(-2:2)\n  title(L\"$\\nabla^2\\psi + \\eta$ (part of the domain)\")\n  if drawcolorbar==true\n    colorbar()\n  end\n\n  sca(axs[2])\n  cla()\n  plot(μ*E.t[1:E.i], E.data[1:E.i], label=L\"$E_{\\psi}$\")\n  plot(μ*E.t[1:Emean.i], Emean.data[1:Emean.i], label=L\"$E_U$\")\n\n  xlabel(L\"\\mu t\")\n  ylabel(\"energy\")\n  legend()\n\n  sca(axs[3])\n  cla()\n  plot(μ*Q.t[1:Q.i], Q.data[1:Q.i], label=L\"$Q_{\\psi}$\")\n  plot(μ*Qmean.t[1:Qmean.i], Qmean.data[1:Qmean.i], label=L\"$Q_U$\")\n  xlabel(L\"\\mu t\")\n  ylabel(\"potential enstrophy\")\n  legend()\n  tight_layout(w_pad=0.1)\nend\nnothing # hide","category":"page"},{"location":"generated/barotropicqg_acc/#Time-stepping-the-Problem-forward-1","page":"Decaying barotropic quasi-geostropic turbulence on a beta-plane","title":"Time-stepping the Problem forward","text":"","category":"section"},{"location":"generated/barotropicqg_acc/#","page":"Decaying barotropic quasi-geostropic turbulence on a beta-plane","title":"Decaying barotropic quasi-geostropic turbulence on a beta-plane","text":"We time-step the Problem forward in time.","category":"page"},{"location":"generated/barotropicqg_acc/#","page":"Decaying barotropic quasi-geostropic turbulence on a beta-plane","title":"Decaying barotropic quasi-geostropic turbulence on a beta-plane","text":"startwalltime = time()\n\nwhile cl.step < nsteps\n  stepforward!(prob, diags, nsubs)\n\n  cfl = cl.dt*maximum([maximum(v.U.+v.u)/g.dx, maximum(v.v)/g.dy])\n\n  log = @sprintf(\"step: %04d, t: %d, cfl: %.2f, E: %.4f, Q: %.4f, walltime: %.2f min\",\n    cl.step, cl.t, cfl, E.data[E.i], Q.data[Q.i], (time()-startwalltime)/60)\n\n  println(log)\nend\nprintln(\"finished\")","category":"page"},{"location":"generated/barotropicqg_acc/#Plot-1","page":"Decaying barotropic quasi-geostropic turbulence on a beta-plane","title":"Plot","text":"","category":"section"},{"location":"generated/barotropicqg_acc/#","page":"Decaying barotropic quasi-geostropic turbulence on a beta-plane","title":"Decaying barotropic quasi-geostropic turbulence on a beta-plane","text":"Now let's see what we got. We plot the output,","category":"page"},{"location":"generated/barotropicqg_acc/#","page":"Decaying barotropic quasi-geostropic turbulence on a beta-plane","title":"Decaying barotropic quasi-geostropic turbulence on a beta-plane","text":"fig, axs = subplots(ncols=3, nrows=1, figsize=(15, 4))\nplot_output(prob, fig, axs; drawcolorbar=true)\ngcf() # hide","category":"page"},{"location":"generated/barotropicqg_acc/#","page":"Decaying barotropic quasi-geostropic turbulence on a beta-plane","title":"Decaying barotropic quasi-geostropic turbulence on a beta-plane","text":"and finally save the figure","category":"page"},{"location":"generated/barotropicqg_acc/#","page":"Decaying barotropic quasi-geostropic turbulence on a beta-plane","title":"Decaying barotropic quasi-geostropic turbulence on a beta-plane","text":"savename = @sprintf(\"%s_%09d.png\", joinpath(plotpath, plotname), cl.step)\nsavefig(savename)","category":"page"},{"location":"generated/barotropicqg_acc/#","page":"Decaying barotropic quasi-geostropic turbulence on a beta-plane","title":"Decaying barotropic quasi-geostropic turbulence on a beta-plane","text":"","category":"page"},{"location":"generated/barotropicqg_acc/#","page":"Decaying barotropic quasi-geostropic turbulence on a beta-plane","title":"Decaying barotropic quasi-geostropic turbulence on a beta-plane","text":"This page was generated using Literate.jl.","category":"page"},{"location":"man/types/#Private-types-1","page":"Private types","title":"Private types","text":"","category":"section"},{"location":"man/types/#Private-types-in-module-GeophysicalFlows:-1","page":"Private types","title":"Private types in module GeophysicalFlows:","text":"","category":"section"},{"location":"man/types/#","page":"Private types","title":"Private types","text":"Modules = [GeophysicalFlows]\nPublic = false\nOrder = [:type]","category":"page"},{"location":"man/types/#Private-types-in-module-TwoDNavierStokes:-1","page":"Private types","title":"Private types in module TwoDNavierStokes:","text":"","category":"section"},{"location":"man/types/#","page":"Private types","title":"Private types","text":"Modules = [GeophysicalFlows.TwoDNavierStokes]\nPublic = false\nOrder = [:type]","category":"page"},{"location":"man/types/#GeophysicalFlows.TwoDNavierStokes.ForcedVars-Union{Tuple{T}, Tuple{Dev}, Tuple{Dev,AbstractGrid{T,Ta} where Ta}} where T where Dev","page":"Private types","title":"GeophysicalFlows.TwoDNavierStokes.ForcedVars","text":"ForcedVars(dev, g)\n\nReturns the vars for forced two-dimensional turbulence on device dev and with  grid g.\n\n\n\n\n\n","category":"method"},{"location":"man/types/#GeophysicalFlows.TwoDNavierStokes.Params","page":"Private types","title":"GeophysicalFlows.TwoDNavierStokes.Params","text":"Params(ν, nν, μ, nμ, calcF!)\n\nReturns the params for two-dimensional turbulence.\n\n\n\n\n\n","category":"type"},{"location":"man/types/#GeophysicalFlows.TwoDNavierStokes.StochasticForcedVars-Union{Tuple{T}, Tuple{Dev}, Tuple{Dev,AbstractGrid{T,Ta} where Ta}} where T where Dev","page":"Private types","title":"GeophysicalFlows.TwoDNavierStokes.StochasticForcedVars","text":"StochasticForcedVars(dev, g)\n\nReturns the vars for stochastically forced two-dimensional turbulence on device dev and with grid g.\n\n\n\n\n\n","category":"method"},{"location":"man/types/#GeophysicalFlows.TwoDNavierStokes.Vars-Union{Tuple{T}, Tuple{Dev}, Tuple{Dev,AbstractGrid{T,Ta} where Ta}} where T where Dev","page":"Private types","title":"GeophysicalFlows.TwoDNavierStokes.Vars","text":"Vars(dev, g)\n\nReturns the vars for unforced two-dimensional turbulence on device dev and with  grid g.\n\n\n\n\n\n","category":"method"},{"location":"man/types/#Private-types-in-module-BarotropicQG:-1","page":"Private types","title":"Private types in module BarotropicQG:","text":"","category":"section"},{"location":"man/types/#","page":"Private types","title":"Private types","text":"Modules = [GeophysicalFlows.BarotropicQG]\nPublic = false\nOrder = [:type]","category":"page"},{"location":"man/types/#GeophysicalFlows.BarotropicQG.ForcedVars-Union{Tuple{T}, Tuple{Dev}, Tuple{Dev,AbstractGrid{T,Ta} where Ta}} where T where Dev","page":"Private types","title":"GeophysicalFlows.BarotropicQG.ForcedVars","text":"ForcedVars(dev, g)\n\nReturns the vars for forced two-dimensional barotropic QG problem on device dev and with grid g.\n\n\n\n\n\n","category":"method"},{"location":"man/types/#GeophysicalFlows.BarotropicQG.Params","page":"Private types","title":"GeophysicalFlows.BarotropicQG.Params","text":"Params(g::TwoDGrid, f0, β, FU, eta, μ, ν, nν, calcFU, calcFq)\n\nReturns the params for an unforced two-dimensional barotropic QG problem.\n\n\n\n\n\n","category":"type"},{"location":"man/types/#GeophysicalFlows.BarotropicQG.Params-Union{Tuple{A}, Tuple{T}, Tuple{AbstractGrid{T,A},Any,Any,Function,Any,Any,Int64,Any,Any}} where A where T","page":"Private types","title":"GeophysicalFlows.BarotropicQG.Params","text":"Params(g::TwoDGrid, f0, β, eta::Function, μ, ν, nν, calcFU, calcFq)\n\nConstructor for Params that accepts a generating function for the topographic PV.\n\n\n\n\n\n","category":"method"},{"location":"man/types/#GeophysicalFlows.BarotropicQG.StochasticForcedVars-Union{Tuple{T}, Tuple{Dev}, Tuple{Dev,AbstractGrid{T,Ta} where Ta}} where T where Dev","page":"Private types","title":"GeophysicalFlows.BarotropicQG.StochasticForcedVars","text":"StochasticForcedVars(dev, g)\n\nReturns the vars for stochastically forced two-dimensional barotropic QG problem on device dev and with grid g.\n\n\n\n\n\n","category":"method"},{"location":"man/types/#GeophysicalFlows.BarotropicQG.Vars-Union{Tuple{T}, Tuple{Dev}, Tuple{Dev,AbstractGrid{T,Ta} where Ta}} where T where Dev","page":"Private types","title":"GeophysicalFlows.BarotropicQG.Vars","text":"Vars(dev, g)\n\nReturns the vars for unforced two-dimensional barotropic QG problem on device dev and with grid g.\n\n\n\n\n\n","category":"method"},{"location":"man/types/#Private-types-in-module-BarotropicQGQL:-1","page":"Private types","title":"Private types in module BarotropicQGQL:","text":"","category":"section"},{"location":"man/types/#","page":"Private types","title":"Private types","text":"Modules = [GeophysicalFlows.BarotropicQGQL]\nPublic = false\nOrder = [:type]","category":"page"},{"location":"man/types/#GeophysicalFlows.BarotropicQGQL.ForcedVars","page":"Private types","title":"GeophysicalFlows.BarotropicQGQL.ForcedVars","text":"ForcedVars(g)\n\nReturns the vars for forced two-dimensional barotropic QG problem with grid g.\n\n\n\n\n\n","category":"type"},{"location":"man/types/#GeophysicalFlows.BarotropicQGQL.Params","page":"Private types","title":"GeophysicalFlows.BarotropicQGQL.Params","text":"Params(g::TwoDGrid, f0, beta, FU, eta, mu, nu, nnu)\n\nReturns the params for an unforced two-dimensional barotropic QG problem.\n\n\n\n\n\n","category":"type"},{"location":"man/types/#GeophysicalFlows.BarotropicQGQL.Params-Union{Tuple{T}, Tuple{AbstractGrid{T,Ta} where Ta,Any,Any,Function,Any,Any,Any,Any}} where T","page":"Private types","title":"GeophysicalFlows.BarotropicQGQL.Params","text":"Params(g::TwoDGrid, f0, beta, eta::Function, mu, nu, nnu)\n\nConstructor for Params that accepts a generating function for the topographic PV.\n\n\n\n\n\n","category":"method"},{"location":"man/types/#GeophysicalFlows.BarotropicQGQL.Vars","page":"Private types","title":"GeophysicalFlows.BarotropicQGQL.Vars","text":"Vars(g)\n\nReturns the vars for unforced two-dimensional barotropic QG problem with grid g.\n\n\n\n\n\n","category":"type"},{"location":"man/types/#Private-types-in-module-MultilayerQG:-1","page":"Private types","title":"Private types in module MultilayerQG:","text":"","category":"section"},{"location":"man/types/#","page":"Private types","title":"Private types","text":"Modules = [GeophysicalFlows.MultilayerQG]\nPublic = false\nOrder = [:type]","category":"page"},{"location":"man/types/#GeophysicalFlows.MultilayerQG.ForcedVars-Union{Tuple{T}, Tuple{AbstractGrid{T,Ta} where Ta,Any}} where T","page":"Private types","title":"GeophysicalFlows.MultilayerQG.ForcedVars","text":"ForcedVars(g)\n\nReturns the vars for forced multi-layer QG problem with grid gr.\n\n\n\n\n\n","category":"method"},{"location":"man/types/#GeophysicalFlows.MultilayerQG.Vars-Union{Tuple{T}, Tuple{AbstractGrid{T,Ta} where Ta,Any}} where T","page":"Private types","title":"GeophysicalFlows.MultilayerQG.Vars","text":"Vars(g)\n\nReturns the vars for unforced multi-layer QG problem with grid gr.\n\n\n\n\n\n","category":"method"},{"location":"#GeophysicalFlows.jl-Documentation-1","page":"Home","title":"GeophysicalFlows.jl Documentation","text":"","category":"section"},{"location":"#Overview-1","page":"Home","title":"Overview","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"GeophysicalFlows.jl is a collection of modules which leverage the  FourierFlows.jl framework to provide solvers for problems in Geophysical Fluid Dynamics, on periodic domains and using Fourier-based pseudospectral methods.","category":"page"},{"location":"#Developers-1","page":"Home","title":"Developers","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"GeophysicalFlows is currently being developed by Navid C. Constantinou and Gregory L. Wagner.","category":"page"},{"location":"#Cite-1","page":"Home","title":"Cite","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"The code is citable via zenodo.","category":"page"}]
}
